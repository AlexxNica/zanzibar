// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package contactsClient

// @generated

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts(in *jlexer.Lexer, out *SaveContactsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "app_type":
			out.AppType = string(in.String())
		case "contacts":
			if in.IsNull() {
				in.Skip()
				out.Contacts = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Contacts = make([]*Contact, 0, 8)
				} else {
					out.Contacts = []*Contact{}
				}
				for !in.IsDelim(']') {
					var v1 *Contact
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Contact)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Contacts = append(out.Contacts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "device_type":
			out.DeviceType = string(in.String())
		case "app_version":
			out.AppVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts(out *jwriter.Writer, in SaveContactsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"app_type\":")
	out.String(string(in.AppType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"contacts\":")
	if in.Contacts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Contacts {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"device_type\":")
	out.String(string(in.DeviceType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"app_version\":")
	out.String(string(in.AppVersion))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SaveContactsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SaveContactsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SaveContactsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SaveContactsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts(l, v)
}
func easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts1(in *jlexer.Lexer, out *Contact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fragments":
			if in.IsNull() {
				in.Skip()
				out.Fragments = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Fragments = make([]*ContactFragment, 0, 8)
				} else {
					out.Fragments = []*ContactFragment{}
				}
				for !in.IsDelim(']') {
					var v4 *ContactFragment
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(ContactFragment)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Fragments = append(out.Fragments, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attributes":
			(out.Attributes).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts1(out *jwriter.Writer, in Contact) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fragments\":")
	if in.Fragments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in.Fragments {
			if v5 > 0 {
				out.RawByte(',')
			}
			if v6 == nil {
				out.RawString("null")
			} else {
				(*v6).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"attributes\":")
	(in.Attributes).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts1(l, v)
}
func easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts2(in *jlexer.Lexer, out *ContactAttributes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "nickname":
			out.Nickname = string(in.String())
		case "has_photo":
			out.HasPhoto = bool(in.Bool())
		case "num_fields":
			out.NumFields = int32(in.Int32())
		case "times_contacted":
			out.TimesContacted = int32(in.Int32())
		case "last_time_contacted":
			out.LastTimeContacted = int32(in.Int32())
		case "is_starred":
			out.IsStarred = bool(in.Bool())
		case "has_custom_ringtone":
			out.HasCustomRingtone = bool(in.Bool())
		case "is_send_to_voicemail":
			out.IsSendToVoicemail = bool(in.Bool())
		case "has_thumbnail":
			out.HasThumbnail = bool(in.Bool())
		case "name_prefix":
			out.NamePrefix = string(in.String())
		case "name_suffix":
			out.NameSuffix = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts2(out *jwriter.Writer, in ContactAttributes) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"first_name\":")
	out.String(string(in.FirstName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"last_name\":")
	out.String(string(in.LastName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nickname\":")
	out.String(string(in.Nickname))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"has_photo\":")
	out.Bool(bool(in.HasPhoto))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_fields\":")
	out.Int32(int32(in.NumFields))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"times_contacted\":")
	out.Int32(int32(in.TimesContacted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"last_time_contacted\":")
	out.Int32(int32(in.LastTimeContacted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"is_starred\":")
	out.Bool(bool(in.IsStarred))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"has_custom_ringtone\":")
	out.Bool(bool(in.HasCustomRingtone))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"is_send_to_voicemail\":")
	out.Bool(bool(in.IsSendToVoicemail))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"has_thumbnail\":")
	out.Bool(bool(in.HasThumbnail))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name_prefix\":")
	out.String(string(in.NamePrefix))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name_suffix\":")
	out.String(string(in.NameSuffix))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContactAttributes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContactAttributes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContactAttributes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContactAttributes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts2(l, v)
}
func easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts3(in *jlexer.Lexer, out *ContactFragment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts3(out *jwriter.Writer, in ContactFragment) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"text\":")
	out.String(string(in.Text))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContactFragment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContactFragment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF0558924EncodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContactFragment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContactFragment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF0558924DecodeGithubComUberZanzibarExamplesExampleGatewayClientsContacts3(l, v)
}
