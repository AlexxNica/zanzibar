// Code generated by zanzibar
// @generated

package googlenow

import (
	"context"
	"net/http"

	"github.com/uber/zanzibar/examples/example-gateway/build/clients"
	zanzibar "github.com/uber/zanzibar/runtime"
	"go.uber.org/zap"

	"github.com/uber/zanzibar/examples/example-gateway/build/clients/googlenow"
)

// HandleAddCredentialsRequest handles "/googlenow/add-credentials".
func HandleAddCredentialsRequest(
	ctx context.Context,
	req *zanzibar.ServerHTTPRequest,
	res *zanzibar.ServerHTTPResponse,
	clients *clients.Clients,
) {
	var requestBody AddCredentialsHTTPRequest
	if ok := req.ReadAndUnmarshalBody(&requestBody); !ok {
		return
	}

	workflow := AddCredentialsEndpoint{
		Clients: clients,
		Logger:  req.Logger,
		Request: req,
	}

	respHeaders, err := workflow.Handle(ctx, req.Header, &requestBody)
	if err != nil {
		req.Logger.Warn("Workflow for endpoint returned error",
			zap.String("error", err.Error()),
		)
		res.SendErrorString(500, "Unexpected server error")
		return
	}

	res.WriteJSONBytes(202, respHeaders, nil)
}

// AddCredentialsEndpoint calls thrift client GoogleNow.AddCredentials
type AddCredentialsEndpoint struct {
	Clients *clients.Clients
	Logger  *zap.Logger
	Request *zanzibar.ServerHTTPRequest
}

// Handle calls thrift client.
func (w AddCredentialsEndpoint) Handle(
	ctx context.Context,
	// TODO(sindelar): Switch to zanzibar.Headers when tchannel
	// generation is implemented.
	headers http.Header,
	r *AddCredentialsHTTPRequest,
) (map[string]string, error) {
	clientRequest := convertToAddCredentialsClientRequest(r)

	clientHeaders := map[string]string{}
	for k, v := range map[string]string{"x-token": "x-token", "x-uuid": "x-uuid"} {
		clientHeaders[v] = headers.Get(k)
	}

	respHeaders, err := w.Clients.GoogleNow.AddCredentials(
		ctx, clientHeaders, clientRequest,
	)
	if err != nil {
		w.Logger.Warn("Could not make client request",
			zap.String("error", err.Error()),
		)
		return nil, err
	}

	endRespHead := map[string]string{}
	for k, v := range map[string]string{"x-uuid": "x-uuid", "x-token": "x-token"} {
		endRespHead[v] = respHeaders[k]
	}

	return endRespHead, nil
}

func convertToAddCredentialsClientRequest(body *AddCredentialsHTTPRequest) *googlenowClient.AddCredentialsHTTPRequest {
	clientRequest := &googlenowClient.AddCredentialsHTTPRequest{}

	clientRequest.AuthCode = string(body.AuthCode)

	return clientRequest
}
