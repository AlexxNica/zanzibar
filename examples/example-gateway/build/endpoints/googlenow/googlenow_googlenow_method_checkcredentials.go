// Code generated by zanzibar
// @generated

package googlenow

import (
	"context"

	"github.com/uber/zanzibar/examples/example-gateway/build/clients"
	zanzibar "github.com/uber/zanzibar/runtime"
	"go.uber.org/zap"
)

// CheckCredentialsHandler is the handler for "/googlenow/check-credentials"
type CheckCredentialsHandler struct {
	Clients *clients.Clients
}

// NewCheckCredentialsEndpoint creates a handler
func NewCheckCredentialsEndpoint(
	gateway *zanzibar.Gateway,
) *CheckCredentialsHandler {
	return &CheckCredentialsHandler{
		Clients: gateway.Clients.(*clients.Clients),
	}
}

// HandleRequest handles "/googlenow/check-credentials".
func (handler *CheckCredentialsHandler) HandleRequest(
	ctx context.Context,
	req *zanzibar.ServerHTTPRequest,
	res *zanzibar.ServerHTTPResponse,
) {
	if !req.CheckHeaders([]string{"x-uuid", "x-token"}) {
		return
	}

	workflow := CheckCredentialsEndpoint{
		Clients: handler.Clients,
		Logger:  req.Logger,
		Request: req,
	}

	cliRespHeaders, err := workflow.Handle(ctx, req.Header)
	if err != nil {
		req.Logger.Warn("Workflow for endpoint returned error",
			zap.String("error", err.Error()),
		)
		res.SendErrorString(500, "Unexpected server error")
		return
	}
	// TODO(sindelar): implement check headers on response

	res.WriteJSONBytes(202, cliRespHeaders, nil)
}

// CheckCredentialsEndpoint calls thrift client GoogleNow.CheckCredentials
type CheckCredentialsEndpoint struct {
	Clients *clients.Clients
	Logger  *zap.Logger
	Request *zanzibar.ServerHTTPRequest
}

// Handle calls thrift client.
func (w CheckCredentialsEndpoint) Handle(
	ctx context.Context,
	reqHeaders zanzibar.ServerHeaderInterface,
) (zanzibar.ServerHeaderInterface, error) {

	clientHeaders := map[string]string{}

	var ok bool
	var h string
	h, ok = reqHeaders.Get("X-Uuid")
	if ok {
		clientHeaders["X-Uuid"] = h
	}

	cliRespHeaders, err := w.Clients.GoogleNow.CheckCredentials(ctx, clientHeaders)
	if err != nil {
		w.Logger.Warn("Could not make client request",
			zap.String("error", err.Error()),
		)
		// TODO(sindelar): Consider returning partial headers in error case.
		return nil, err
	}

	// Filter and map response headers from client to server response.

	// TODO: Add support for TChannel Headers with a switch here
	resHeaders := zanzibar.ServerHTTPHeader{}

	resHeaders.Set("X-Uuid", cliRespHeaders["X-Uuid"])

	return resHeaders, nil
}
