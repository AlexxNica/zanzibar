// Code generated by zanzibar
// @generated

// Package baz is generated code used to handle TChannel calls using Thrift.
package baz

import (
	"context"
	"errors"

	"github.com/uber/zanzibar/examples/example-gateway/build/clients"
	zanzibar "github.com/uber/zanzibar/runtime"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/zap"

	clientsBazBaz "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/baz/baz"
	endpointsBazBaz "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/endpoints/baz/baz"
)

// NewSimpleServiceCallHandler creates a handler to be registered with a thrift server.
func NewSimpleServiceCallHandler(
	gateway *zanzibar.Gateway,
) zanzibar.TChanHandler {
	return &SimpleServiceCallHandler{
		Clients: gateway.Clients.(*clients.Clients),
		Logger:  gateway.Logger,
	}
}

// SimpleServiceCallHandler is the handler for "SimpleService::Call".
type SimpleServiceCallHandler struct {
	Clients *clients.Clients
	Logger  *zap.Logger
}

// Service returns the service name.
func (h *SimpleServiceCallHandler) Service() string {
	return "SimpleService"
}

// Method returns the method name.
func (h *SimpleServiceCallHandler) Method() string {
	return "Call"
}

// Handle handles RPC call of "SimpleService::Call".
func (h *SimpleServiceCallHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var res endpointsBazBaz.SimpleService_Call_Result

	var req endpointsBazBaz.SimpleService_Call_Args
	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	workflow := TChanCallEndpoint{
		Clients: h.Clients,
		Logger:  h.Logger,
	}

	respHeaders, err := workflow.Handle(ctx, reqHeaders, &req)
	if err != nil {
		switch v := err.(type) {
		case *endpointsBazBaz.AuthErr:
			if v == nil {
				return false, nil, nil, errors.New(
					"Handler for Call returned non-nil error type *AuthErr but nil value",
				)
			}
			res.AuthErr = v
		default:
			return false, nil, nil, err
		}
	}

	return err == nil, &res, respHeaders, nil
}

// TChanCallEndpoint calls thrift client Baz.Call
type TChanCallEndpoint struct {
	Clients *clients.Clients
	Logger  *zap.Logger
}

// Handle calls thrift client.
func (w TChanCallEndpoint) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	r *endpointsBazBaz.SimpleService_Call_Args,
) (map[string]string, error) {
	clientRequest := convertToCallClientRequestTChan(r)
	clientHeaders := map[string]string{}

	_, err := w.Clients.Baz.Call(
		ctx, clientHeaders, clientRequest,
	)

	if err != nil {
		// TODO: (lu) exception conversion from client to endpoint
		w.Logger.Warn("Could not make client request",
			zap.String("error", err.Error()),
		)
		return nil, err
	}

	// Filter and map response headers from client to server response.

	resHeaders := map[string]string{}

	return resHeaders, nil
}

func convertToCallClientRequestTChan(body *endpointsBazBaz.SimpleService_Call_Args) *clientsBazBaz.SimpleService_Call_Args {
	clientRequest := &clientsBazBaz.SimpleService_Call_Args{}

	clientRequest.Arg = (*clientsBazBaz.BazRequest)(body.Arg)

	return clientRequest
}
