// Code generated by zanzibar
// @generated

package baz

import (
	"context"

	"github.com/uber/zanzibar/examples/example-gateway/build/clients"
	zanzibar "github.com/uber/zanzibar/runtime"
	"go.uber.org/zap"
)

// HandleSimpleFutureRequest handles "/baz/simple-future-path".
func HandleSimpleFutureRequest(
	ctx context.Context,
	req *zanzibar.ServerHTTPRequest,
	res *zanzibar.ServerHTTPResponse,
	clients *clients.Clients,
) {

	headers := map[string]string{}

	workflow := SimpleFutureEndpoint{
		Clients: clients,
		Logger:  req.Logger,
		Request: req,
	}

	_, err := workflow.Handle(ctx, headers)
	if err != nil {
		req.Logger.Warn("Workflow for endpoint returned error",
			zap.String("error", err.Error()),
		)
		res.SendErrorString(500, "Unexpected server error")
		return
	}

	res.WriteJSONBytes(204, nil)
}

// SimpleFutureEndpoint calls thrift client Baz.SimpleFuture
type SimpleFutureEndpoint struct {
	Clients *clients.Clients
	Logger  *zap.Logger
	Request *zanzibar.ServerHTTPRequest
}

// Handle calls thrift client.
func (w SimpleFutureEndpoint) Handle(
	ctx context.Context,
	headers map[string]string,
) (map[string]string, error) {

	_, err := w.Clients.Baz.SimpleFuture(ctx, nil)
	if err != nil {
		w.Logger.Warn("Could not make client request",
			zap.String("error", err.Error()),
		)
		return nil, err
	}

	return nil, nil
}
