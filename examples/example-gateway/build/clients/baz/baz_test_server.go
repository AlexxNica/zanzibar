// Code generated by zanzibar
// @generated

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package bazClient is generated code used to make or handle TChannel calls using Thrift.
package bazClient

import (
	"context"
	"errors"
	"fmt"

	"github.com/uber/zanzibar/runtime"
	"go.uber.org/thriftrw/wire"

	clientsBazBaz "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/baz/baz"
)

// SimpleServiceServer is the TChannel backend for SimpleService service.
type SimpleServiceServer struct {
	handler TChanBaz
}

// NewSimpleServiceServer wraps a handler for Baz so it can be registered with a thrift server.
func NewSimpleServiceServer(handler TChanBaz) zanzibar.TChanServer {
	return &SimpleServiceServer{
		handler,
	}
}

// Service returns the service name.
func (s *SimpleServiceServer) Service() string {
	return "SimpleService"
}

// Methods returns the method names handled by this server.
func (s *SimpleServiceServer) Methods() []string {
	return []string{
		"Call",
		"Compare",
		"Ping",
		"SillyNoop",
	}
}

// Handle dispatches a method call to corresponding handler.
func (s *SimpleServiceServer) Handle(
	ctx context.Context,
	methodName string,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	switch methodName {
	case "Call":
		return s.handleCall(ctx, reqHeaders, wireValue)
	case "Compare":
		return s.handleCompare(ctx, reqHeaders, wireValue)
	case "Ping":
		return s.handlePing(ctx, reqHeaders, wireValue)
	case "SillyNoop":
		return s.handleSillyNoop(ctx, reqHeaders, wireValue)
	default:
		return false, nil, nil, fmt.Errorf(
			"method %v not found in service %v", methodName, s.Service(),
		)
	}
}

func (s *SimpleServiceServer) handleCall(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SimpleService_Call_Args
	var res clientsBazBaz.SimpleService_Call_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	respHeaders, err := s.handler.Call(ctx, reqHeaders, &req)

	if err != nil {
		switch v := err.(type) {
		case *clientsBazBaz.AuthErr:
			if v == nil {
				return false, nil, nil, errors.New(
					"Handler for AuthErr returned non-nil error type *AuthErr but nil value",
				)
			}
			res.AuthErr = v
		default:
			return false, nil, nil, err
		}
	}

	return err == nil, &res, respHeaders, nil
}

func (s *SimpleServiceServer) handleCompare(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SimpleService_Compare_Args
	var res clientsBazBaz.SimpleService_Compare_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := s.handler.Compare(ctx, reqHeaders, &req)

	if err != nil {
		switch v := err.(type) {
		case *clientsBazBaz.AuthErr:
			if v == nil {
				return false, nil, nil, errors.New(
					"Handler for AuthErr returned non-nil error type *AuthErr but nil value",
				)
			}
			res.AuthErr = v
		default:
			return false, nil, nil, err
		}
	} else {
		res.Success = r
	}

	return err == nil, &res, respHeaders, nil
}

func (s *SimpleServiceServer) handlePing(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SimpleService_Ping_Args
	var res clientsBazBaz.SimpleService_Ping_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := s.handler.Ping(ctx, reqHeaders)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = r

	return err == nil, &res, respHeaders, nil
}

func (s *SimpleServiceServer) handleSillyNoop(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SimpleService_SillyNoop_Args
	var res clientsBazBaz.SimpleService_SillyNoop_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	respHeaders, err := s.handler.SillyNoop(ctx, reqHeaders)

	if err != nil {
		switch v := err.(type) {
		case *clientsBazBaz.AuthErr:
			if v == nil {
				return false, nil, nil, errors.New(
					"Handler for AuthErr returned non-nil error type *AuthErr but nil value",
				)
			}
			res.AuthErr = v
		case *clientsBazBaz.ServerErr:
			if v == nil {
				return false, nil, nil, errors.New(
					"Handler for ServerErr returned non-nil error type *ServerErr but nil value",
				)
			}
			res.ServerErr = v
		default:
			return false, nil, nil, err
		}
	}

	return err == nil, &res, respHeaders, nil
}
