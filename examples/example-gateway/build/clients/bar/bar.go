// Code generated by zanzibar
// @generated

package barClient

import (
	"bytes"
	"context"
	"net/http"
	"strconv"

	"github.com/uber/zanzibar/runtime"
)

// BarClient is the http client for service Bar.
type BarClient struct {
	client *zanzibar.HTTPClient
}

// NewClient returns a new http client for service Bar.
func NewClient(
	config *zanzibar.StaticConfig,
	gateway *zanzibar.Gateway,
) *BarClient {
	ip := config.MustGetString("clients.bar.ip")
	port := config.MustGetInt("clients.bar.port")

	baseURL := "http://" + ip + ":" + strconv.Itoa(int(port))
	return &BarClient{
		client: zanzibar.NewHTTPClient(gateway, baseURL),
	}
}

// ArgNotStruct calls "/arg-not-struct-path" endpoint.
func (c *BarClient) ArgNotStruct(ctx context.Context, r *ArgNotStructHTTPRequest) (*http.Response, error) {
	// Generate full URL.
	fullURL := c.client.BaseURL + "/arg-not-struct-path"

	rawBody, err := r.MarshalJSON()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", fullURL, bytes.NewReader(rawBody))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return c.client.Client.Do(req.WithContext(ctx))
}

// MissingArg calls "/missing-arg-path" endpoint.
func (c *BarClient) MissingArg(ctx context.Context) (*http.Response, error) {
	// Generate full URL.
	fullURL := c.client.BaseURL + "/missing-arg-path"

	req, err := http.NewRequest("GET", fullURL, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return c.client.Client.Do(req.WithContext(ctx))
}

// NoRequest calls "/no-request-path" endpoint.
func (c *BarClient) NoRequest(ctx context.Context) (*http.Response, error) {
	// Generate full URL.
	fullURL := c.client.BaseURL + "/no-request-path"

	req, err := http.NewRequest("GET", fullURL, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return c.client.Client.Do(req.WithContext(ctx))
}

// Normal calls "/bar-path" endpoint.
func (c *BarClient) Normal(ctx context.Context, r *NormalHTTPRequest) (*http.Response, error) {
	// Generate full URL.
	fullURL := c.client.BaseURL + "/bar-path"

	rawBody, err := r.MarshalJSON()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", fullURL, bytes.NewReader(rawBody))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return c.client.Client.Do(req.WithContext(ctx))
}

// TooManyArgs calls "/too-many-args-path" endpoint.
func (c *BarClient) TooManyArgs(ctx context.Context, r *TooManyArgsHTTPRequest) (*http.Response, error) {
	// Generate full URL.
	fullURL := c.client.BaseURL + "/too-many-args-path"

	rawBody, err := r.MarshalJSON()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", fullURL, bytes.NewReader(rawBody))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return c.client.Client.Do(req.WithContext(ctx))
}
