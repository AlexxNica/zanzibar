// Code generated by zanzibar
// @generated

package bar

import (
	"bytes"
	"net/http"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/uber/zanzibar/test/lib/test_gateway"
)

func TestTooManyArgsSuccessfulRequestOKResponse(t *testing.T) {
	var counter int

	gateway, err := testGateway.CreateGateway(t, nil, &testGateway.Options{
		KnownHTTPBackends: []string{"bar"},
		TestBinary: filepath.Join(
			getDirName(), "..", "..", "main.go",
		),
	})
	if !assert.NoError(t, err, "got bootstrap err") {
		return
	}
	defer gateway.Close()

	fakeTooManyArgs := func(w http.ResponseWriter, r *http.Request) {

		assert.Equal(
			t,
			"test-token",
			r.Header.Get("X-Token"))
		assert.Equal(
			t,
			"test-uuid",
			r.Header.Get("X-Uuid"))

		w.Header().Set("X-Token", "test-token")
		w.Header().Set("X-Uuid", "test-uuid")

		w.WriteHeader(200)

		// TODO(zw): generate client response.
		if _, err := w.Write([]byte(`{}`)); err != nil {
			t.Fatal("can't write fake response")
		}
		counter++
	}

	gateway.HTTPBackends()["bar"].HandleFunc(
		"POST", "/too-many-args-path", fakeTooManyArgs,
	)

	headers := map[string]string{}
	headers["X-Token"] = "test-token"
	headers["X-Uuid"] = "test-uuid"

	res, err := gateway.MakeRequest(
		"POST",
		"/bar/too-many-args-path",
		headers,
		bytes.NewReader([]byte(`{}`)),
	)
	if !assert.NoError(t, err, "got http error") {
		return
	}

	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(
		t,
		"test-token",
		res.Header.Get("X-Token"))
	assert.Equal(
		t,
		"test-uuid",
		res.Header.Get("X-Uuid"))

	assert.Equal(t, 1, counter)
}
