// Code generated by zanzibar
// @generated

package bar

import (
	"context"

	"github.com/uber/zanzibar/.tmp_gen/clients"
	zanzibar "github.com/uber/zanzibar/runtime"
	"go.uber.org/zap"

	clientsBarBar "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/bar/bar"
	endpointsBarBar "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/endpoints/bar/bar"
)

// NoRequestHandler is the handler for "/bar/no-request-path"
type NoRequestHandler struct {
	Clients *clients.Clients
}

// NewNoRequestEndpoint creates a handler
func NewNoRequestEndpoint(
	gateway *zanzibar.Gateway,
) *NoRequestHandler {
	return &NoRequestHandler{
		Clients: gateway.Clients.(*clients.Clients),
	}
}

// HandleRequest handles "/bar/no-request-path".
func (handler *NoRequestHandler) HandleRequest(
	ctx context.Context,
	req *zanzibar.ServerHTTPRequest,
	res *zanzibar.ServerHTTPResponse,
) {

	workflow := NoRequestEndpoint{
		Clients: handler.Clients,
		Logger:  req.Logger,
		Request: req,
	}

	response, respHeaders, err := workflow.Handle(ctx, req.Header)
	if err != nil {
		req.Logger.Warn("Workflow for endpoint returned error",
			zap.String("error", err.Error()),
		)
		res.SendErrorString(500, "Unexpected server error")
		return
	}

	res.WriteJSON(200, respHeaders, response)
}

// NoRequestEndpoint calls thrift client Bar.NoRequest
type NoRequestEndpoint struct {
	Clients *clients.Clients
	Logger  *zap.Logger
	Request *zanzibar.ServerHTTPRequest
}

// Handle calls thrift client.
func (w NoRequestEndpoint) Handle(
	ctx context.Context,
	// TODO(sindelar): Switch to zanzibar.Headers when tchannel
	// generation is implemented.
	headers zanzibar.ServerHeaderInterface,
) (*endpointsBarBar.BarResponse, map[string]string, error) {

	clientHeaders := map[string]string{}

	clientRespBody, _, err := w.Clients.Bar.NoRequest(
		ctx, clientHeaders,
	)

	if err != nil {
		w.Logger.Warn("Could not make client request",
			zap.String("error", err.Error()),
		)
		// TODO(sindelar): Consider returning partial headers in error case.
		return nil, nil, err
	}

	// Filter and map response headers from client to server response.
	endRespHead := map[string]string{}

	response := convertNoRequestClientResponse(clientRespBody)
	return response, endRespHead, nil
}

func convertNoRequestClientResponse(body *clientsBarBar.BarResponse) *endpointsBarBar.BarResponse {
	// TODO: Add response fields mapping here.
	downstreamResponse := (*endpointsBarBar.BarResponse)(body)
	return downstreamResponse
}
