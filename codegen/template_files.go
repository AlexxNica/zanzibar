// Code generated by go-bindata.
// sources:
// codegen/templates/endpoint.tmpl
// codegen/templates/endpoint_register.tmpl
// codegen/templates/endpoint_test.tmpl
// codegen/templates/http_client.tmpl
// codegen/templates/init_clients.tmpl
// codegen/templates/main.tmpl
// codegen/templates/main_test.tmpl
// codegen/templates/structs.tmpl
// codegen/templates/tchannel_client.tmpl
// DO NOT EDIT!

package codegen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _endpointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x73\x9b\x46\x14\x7e\x86\x5f\x71\x42\xdd\x0c\x78\x08\xe4\xa5\x2f\xea\x78\xa6\x89\x93\x36\xbd\x24\xce\xd8\xce\xe4\xa1\xd3\xe9\xac\xc5\x91\xc4\x08\x2d\x78\x59\x59\xb6\x29\xff\xbd\x73\xf6\x82\x58\x40\xae\xed\xb6\x2f\xf6\xb2\x9c\xcb\x77\xee\x07\x35\x4d\x7a\x0c\x12\x37\x55\xc1\x24\x82\x2c\x41\x20\xcf\x50\xc0\x92\x49\xdc\xb1\x3b\x58\x49\x59\x01\xf2\xac\x2a\x73\x2e\x61\x5e\x66\x08\xc7\x29\xbc\x6a\x5b\x3f\x4d\xe1\x94\x1e\x97\xc8\x51\x30\x89\x19\x5c\xdd\xc1\x3d\xe3\xf7\xf9\x15\x13\xf4\xf6\x87\xee\x8d\xef\x57\x6c\xbe\x66\x4b\x84\xa6\x49\x3e\xeb\xe3\x27\xb6\xc1\xb6\xf5\xfd\x7c\x53\x95\x42\x42\xe8\x7b\xc1\xbc\xe4\x12\x6f\x65\xe0\x7b\x41\x5e\xa6\x79\xb9\x95\x79\x41\x0f\x1c\x65\x4a\x38\x02\xdf\xf7\x82\x65\x2e\x57\xdb\xab\x64\x5e\x6e\xd2\x6a\xbd\x4c\x51\x88\x52\xd4\x44\xb5\x2c\x93\xed\x15\x8a\xa4\x14\xcb\xf4\x9e\x55\x74\xd5\x34\xc9\x4f\xda\x0e\x47\x69\x3a\x2f\x72\xe4\x92\xb8\x2c\x5e\xe8\xcb\x25\x31\xa9\x7d\x93\x8a\x2d\x97\xf9\x06\x49\x79\xd3\x08\xc6\x97\x08\x47\x79\x76\x1b\xc3\x51\xb5\x5e\xc2\xec\x04\x92\x9f\xf9\xbc\xd8\x66\x98\x19\x25\xb5\x72\x8f\xd7\x34\x44\x90\xbc\x29\x72\x56\x6b\xbd\x10\x98\x3b\x07\x4d\x40\xa4\xc8\x33\xc5\x45\xe7\x7c\x01\xc9\x47\x94\xab\x32\x4b\xde\x95\x3b\x5e\x4b\x81\x6c\x03\x5a\xe4\x2b\x98\x44\x30\x22\x3f\x8c\x69\x91\x17\x48\x3c\x57\xac\xc6\xcf\x4c\xae\x60\x88\xe8\x79\xe8\x2d\x3c\x7d\x8c\x7c\xbf\x69\xe0\x68\x57\x8a\xf5\xa2\x28\x77\x0a\xe3\x57\xf3\xd0\xe9\x20\x0a\x1d\x09\x75\x35\x3b\x01\x99\xcb\x02\x21\x39\xdd\x5f\x5a\xba\x15\xe3\x59\x81\x62\x40\x68\xcc\x56\xb7\x7f\x41\x25\x72\x2e\x17\x10\x7c\x5b\x7f\xd0\xd4\x01\x28\xee\x5d\x2e\x57\x96\x56\x3b\x39\x4d\xa1\x69\xfa\x32\xdb\x16\xf2\x1a\xe4\x0a\xc1\x5c\xc2\xa2\x14\x64\x70\xf2\xe1\xf2\xf2\x33\xb9\x89\x2c\x95\x77\x15\x8e\x19\x6b\x29\xb6\x73\x09\x8d\xef\x69\xdc\x35\x1c\x9b\xfc\x32\x86\xd4\xbe\x56\xf9\x09\x77\x4d\x63\x90\x6b\xde\xf7\x5d\x5d\x09\x64\x12\x6b\x60\x56\xbf\xbf\xd8\xf2\xf9\x03\x1c\xa1\xef\xd9\x0a\x3d\xb6\x99\x6a\x73\x3d\xf6\x23\x38\x1e\xc1\x6c\x7c\x4f\xa0\xdc\x0a\x0e\x2f\x87\xef\x1a\xdf\xb3\xd8\x67\xb6\xf0\x2d\xf6\x24\x1c\x5a\x13\xc5\xbe\xd7\x1a\x93\xb4\xa3\xcf\xf1\x7a\x8b\xb5\x34\xd8\xeb\xa1\xdf\x12\x6d\x4c\x68\x5d\x3b\xc2\x16\xb9\x72\x42\xdf\x9b\xcb\x5b\x30\xdd\x20\x39\xd5\xff\x63\xc2\x7f\xdd\xb3\xf6\x02\xc5\x0d\x0a\xd2\x63\xf8\x14\x45\x7d\x80\xa2\xae\x4a\x5e\x23\xb9\xa6\xd1\x89\x4a\x55\xf6\x01\x59\x86\xc2\xd4\x46\xbe\x80\x17\x02\xaf\x93\xd3\x15\xce\xd7\xe6\x4d\x48\x96\x18\xa2\x5e\x82\x7d\x73\x43\xa9\xa5\x44\x19\xa7\x92\x4b\x6c\xfe\xf7\x0b\x99\x23\x24\x06\xde\x25\x65\x4f\x10\x90\xaa\x1b\x26\x40\xe8\xdb\xb7\x65\x76\x47\x5d\xb1\x47\x64\xc0\x94\x6b\xca\x74\x42\x74\x8e\x2c\x7b\xc3\xb3\x2f\x7c\xc3\x44\xbd\x62\x05\xf1\x84\x2f\x7b\x02\xa2\xef\xe1\x45\xb9\x1e\xc3\xd1\xc5\xe8\x7b\x2b\x63\xc2\xec\x04\x36\xac\xfa\xbd\x96\x22\xe7\xcb\x3f\xf4\xbf\x86\x08\xfa\x85\xda\x34\x5d\xdd\x0e\x52\xc3\x04\xcd\x26\x42\xec\x7b\xde\x6f\xe5\x72\x89\x62\xa6\x60\xea\x33\xdd\x1a\x63\xd4\x75\x6c\xb0\xe4\x0b\x60\x3c\x83\x10\xaf\x87\x1e\x89\xec\xa5\x8e\x91\xbd\x25\x37\xfc\x19\x03\x0a\x41\xa8\x2c\xa4\x44\xa7\x4a\x38\x97\xb7\x31\x18\xbb\x22\x65\x6b\x51\x23\x05\x75\x2c\x9f\x04\x09\x9b\x00\xf0\x6c\x91\x0e\xba\xc7\x83\x8b\xc1\x89\x94\x95\xfb\x1c\x50\x53\xa2\x4c\xba\x51\xc2\x90\x84\x17\x27\xc0\xf3\xc2\x64\x82\x0d\x49\xf2\x95\x09\x1e\x06\xb6\x01\xab\xde\xd6\x8d\x74\x9d\x30\x98\x81\x9a\xa4\x01\x85\xcf\xbb\x67\x55\x72\xa1\xb2\x23\x0c\xcc\x35\xbd\x4e\xde\xd3\x39\x8c\xa8\x03\x78\x91\x52\x51\x27\x17\xc8\x33\x75\x6f\x18\xbe\x7b\xfd\x3a\x86\xe0\x0b\xc7\xdb\x0a\xe7\xb4\x15\xd4\xaa\x0a\x8d\xf8\xc8\x49\x51\x93\x17\x13\xfe\xd5\x46\x91\xfc\xaf\x22\x97\xf8\xcb\xc5\xd9\xa7\xb7\x77\x12\x55\x41\x9e\xfd\x7a\x21\x99\xdc\xd6\xb4\x7d\x24\xf4\xa7\x6d\x63\xb2\x3a\x32\x15\x48\x51\x1b\xb3\x1f\xe4\xb4\x51\x88\xdc\x02\x6e\x69\x84\x75\xd5\x6c\x3b\xc6\xe4\x5c\xa6\x97\xa3\x21\x43\x97\x66\xbc\x99\x81\xa9\xa6\x60\x6f\x44\x0f\x67\x6e\x8f\xc3\xc8\x71\x19\xa6\x85\x9f\xe3\xb5\xf2\xd9\xec\x04\x16\xdb\xa2\xa0\xb3\x92\x18\x3a\xa2\x22\xa7\x26\x42\x17\x58\x34\x96\x59\x4f\xca\x9c\x10\xda\x8b\xda\x3f\x49\xd5\x4c\xee\x08\x1f\x0a\xec\x9c\x61\x87\xf4\xbe\x15\xc1\x9c\x15\x05\x0d\x69\x91\x2f\x24\x68\x36\xa2\xd8\xaf\x10\x6d\x9b\x74\xcf\x7b\x65\x6d\xdb\x0d\xee\x9e\xb0\x47\x4c\x6d\xd3\xdc\x80\x26\x4a\x65\x4a\xc9\xb7\xbd\xed\xa1\x41\xe4\x0c\xc7\x29\xd8\x76\x22\xee\x5c\x50\x76\x0e\x86\x36\xdd\x9e\xd6\x30\xd5\x8a\x38\x3d\x39\xed\x00\x18\x75\x7f\x1a\x88\xe1\xf8\x56\x57\x2b\x0d\xb8\x87\x1a\xeb\xb3\x15\x1e\xab\x81\xb7\x47\x4f\x65\xf8\x14\x10\x6e\xab\x78\x16\x0a\x4f\xed\x21\xee\xd8\x7d\xa4\x33\xfe\x5b\x7d\x4f\xf7\x85\x5d\xb2\xed\x1a\x33\xde\x31\x74\xfb\xeb\xfa\x83\xca\xd7\xd9\x09\x01\xbe\x41\x21\x2f\xcb\xc1\x52\x79\xda\x27\x0c\x45\xd4\x5f\x1d\x9c\xc1\x3d\x68\x39\x36\x13\x07\x5d\x63\x3c\xbb\xbb\x65\xf2\x51\xe5\xaa\x67\x9e\x6d\xe8\xbd\xc8\x8f\xd4\xf7\xad\xac\x2b\x1a\x8a\xce\x28\x7d\xa2\x5a\xdf\xf3\xac\xe6\xd8\xf7\x0e\x2a\xaf\xa7\x57\x80\x7f\xa1\x0c\x9c\x48\xf5\x75\xff\x7f\x06\x1e\xd0\x79\x78\x9d\xd8\xb9\xcb\xc4\x69\xb9\x2d\x32\xe0\xa5\x84\x0d\x5b\xa3\x6d\xc7\x66\x3d\x79\xea\x16\xa1\x3e\x4b\x0e\xad\x02\x6d\xab\xf0\xa2\x10\xd6\x27\xea\xb9\x77\xa9\xab\xe1\x31\xeb\x84\x52\x64\xd9\x27\xd6\x05\xc5\xd3\x2b\x95\x03\x85\xa2\xe9\x42\x37\x32\x51\xa7\x60\xbf\xd7\x0d\x54\xf5\x57\x0b\x5b\x56\xe3\xea\x8d\xd4\xe5\x44\xad\x11\xaf\x1a\x1c\x8f\x2b\xe4\x2b\xfa\xb4\x38\xee\x48\x9c\xd6\xa3\xbf\x10\x1d\x15\xfa\x1b\x71\xd4\x34\x5e\x8e\xe9\x1a\xed\x6a\xfb\x53\xc4\x1a\xef\x62\x38\xba\x61\xc5\x56\xaf\x38\x86\xf9\xc7\x1c\x8b\xec\x23\xab\xec\xef\x09\x96\x9c\xb3\x0d\xc6\x70\x24\xcd\x82\x71\x64\x77\xaa\x1e\x3e\xc3\xd5\xa5\x84\xe2\x51\x8a\x26\x3a\x5b\x62\x2d\x54\xef\xdb\x16\xe8\x13\xc6\xc8\x6f\x5b\xe5\x85\x3d\x89\x46\xd9\xb6\x2a\xdb\xbb\x80\x4c\x9d\x7b\x09\xe3\xa8\xf3\xdb\xfe\x5e\x38\x0a\xe4\x60\x24\x3b\x91\xac\x0f\x46\xf2\xe1\x3c\xb3\x81\x74\x05\x99\x20\x0e\x86\x07\xc5\x30\x4d\xe1\xf2\xec\xdd\xd9\x0c\xde\x64\x59\x97\x8c\xb0\xa0\x78\xa8\xd9\x54\xe5\x7c\x09\x2b\x14\x98\xf8\x5e\xd6\xad\x97\xe7\xbd\xf4\x9f\x98\x4a\x91\x82\xb1\x4f\xf2\x31\xa3\xeb\x99\xfd\x71\x7f\xfa\x3b\x00\x00\xff\xff\xce\x3b\x25\x67\x6d\x14\x00\x00")

func endpointTmplBytes() ([]byte, error) {
	return bindataRead(
		_endpointTmpl,
		"endpoint.tmpl",
	)
}

func endpointTmpl() (*asset, error) {
	bytes, err := endpointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "endpoint.tmpl", size: 5229, mode: os.FileMode(420), modTime: time.Unix(1492720389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _endpoint_registerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xdb\x3a\x10\x3c\x93\xbf\x62\x21\x04\x0f\x96\xe1\xc8\xef\x1c\xe0\x01\xaf\x48\x8b\x26\x87\xa6\x41\x1a\xa0\x87\xa2\x07\x5a\xdc\xc8\x84\x65\x4a\xa5\x56\x75\x1c\x96\xff\xbd\xa0\x48\x7d\xc5\x4e\x81\x1e\xb5\x3b\x3b\x9c\x19\xae\x68\xed\x25\xac\x97\x40\xb8\xaf\x4b\x41\x08\x54\x81\x41\x2d\xd1\x40\x21\x08\x0f\xe2\x08\xa8\x65\x5d\x29\x4d\x60\xb0\x50\x0d\x19\x41\xaa\xd2\xb0\x5c\xc3\xa5\x73\x7c\xbd\x86\xeb\x4a\x22\x14\xa8\xd1\x08\x42\x09\x9b\x23\xbc\x08\xfd\xa2\x36\xc2\xf8\xee\xff\x43\x87\xf3\x5a\xe4\x3b\x51\xe0\xc0\xd8\x70\xae\xf6\x75\x65\x08\x16\x9c\x25\x79\xa5\x09\x9f\x29\xe1\x9c\x59\x6b\x84\x2e\x10\x2e\x94\x7c\x5e\xc1\x45\xbd\x2b\xe0\xea\x3f\xc8\x6e\x75\x5e\xb6\x12\xe5\x7d\xe0\x69\x3a\x05\xcc\x5a\x0f\xc8\xde\x95\x4a\x34\x77\x62\x8f\xce\x41\x12\x6b\x11\x18\xaa\x89\x87\xa2\x96\xce\x71\xce\x92\x42\xd1\xb6\xdd\x64\x79\xb5\x5f\xb7\x1b\x34\xeb\x5e\xf3\xda\xb4\x9a\xd4\x1e\x13\x9e\x72\xaf\xff\x43\xaf\x15\x54\x03\x02\x1a\x32\x6d\x4e\x40\x5b\x41\xb0\xad\x4a\xd9\x80\x28\x4b\xa0\xed\xd4\x14\x1d\x6b\x9c\xcc\xc5\x11\x7b\x62\x6b\x08\xd6\x7b\x1b\xf1\xbd\xa9\xbe\x9d\xdd\x08\x2d\x4b\x34\xd1\xdb\xf2\x4c\xeb\xf1\x58\x63\x98\x0a\xfe\x5c\x27\xfd\xda\xa0\x20\x1c\x89\x37\x55\x45\xfe\xfe\xea\x66\x2e\x38\xe3\x4f\xad\xce\x5f\xc3\x17\x9c\xf5\x1b\xb0\xec\xc3\xc9\x3e\x86\xca\x8a\xa7\xa0\x34\xa1\x79\x12\x39\x5a\xe7\xbd\x19\xa4\xd6\x68\xf8\x67\x98\xb7\x9c\x9d\x18\x3e\xe7\xb4\xb3\x3a\xf7\x78\xc5\x59\x2c\xcf\x2e\x30\xbb\xc3\x43\x57\xfd\x84\xb4\xad\x64\x28\xf6\x6c\x8b\x28\x36\x5d\x75\x94\x21\x07\xd6\x47\xf1\xd0\xad\x2e\x1a\x38\xa8\xb2\x8c\x8b\x8c\xa6\xbb\xbb\xf1\xde\xba\x14\x7a\xe4\xa2\x38\x63\x1b\x4c\xd5\xfa\xb9\xb1\xf3\xd0\x15\x52\x9f\xc0\x40\xe4\x5d\xbe\x0e\xb3\x48\xb3\xc5\x72\xf8\x4c\x4f\x77\xfc\x4f\xcb\x10\x4e\xcd\x06\x69\x9c\xb1\x64\xba\x05\x21\x0f\xe7\x92\x15\xcc\xea\x37\x8f\x8f\xf7\xf7\x82\xb6\xbe\xc3\x19\x1b\x44\xdf\xe1\x21\xe8\x1e\xc2\xf3\x81\x17\x1e\x33\x27\xee\xfb\xb7\xef\x23\xc5\xbc\x1d\x2f\x6d\xec\x5a\x0b\xea\x09\x4a\xd4\x30\x11\xa7\xa4\x2c\xf1\x20\x0c\x36\xf0\x0b\x34\xc2\xbf\xf1\xde\x67\x7a\xbe\x90\xc8\x77\x8b\x6f\xdf\x87\xda\x38\x16\x4e\xf1\xeb\x74\xb2\x50\xfb\x01\xe4\x63\x3b\x7f\x66\x3c\xcc\xef\xd3\x08\xcf\xc6\x8d\x0a\xd8\xaf\xc2\x60\x97\x42\x9f\xc3\x5b\x13\x9f\x6b\xff\xfc\x35\x76\xc0\x44\x41\x3b\x3c\xae\xe0\xe2\xa7\x28\xdb\xa0\x65\x32\x19\x47\x06\x25\x91\x7b\x87\x47\xe7\xe0\x0a\xac\x0d\x63\xce\x8d\x07\xa3\x96\x13\x78\x6c\xa4\x2b\x7e\xd2\x75\xab\xc9\x7f\xfc\xe6\xa3\x11\xbf\x1e\xf0\x47\x8b\x0d\xa5\xf1\x33\x5e\xd9\x25\x60\xd9\x60\x4f\xf8\xd7\x6c\x23\x4b\xf8\xe5\x18\xe3\x41\x6a\x3a\x7d\x8f\x7e\x07\x00\x00\xff\xff\xdc\x29\x7e\x64\x67\x06\x00\x00")

func endpoint_registerTmplBytes() ([]byte, error) {
	return bindataRead(
		_endpoint_registerTmpl,
		"endpoint_register.tmpl",
	)
}

func endpoint_registerTmpl() (*asset, error) {
	bytes, err := endpoint_registerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "endpoint_register.tmpl", size: 1639, mode: os.FileMode(420), modTime: time.Unix(1492720389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _endpoint_testTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5f\x6f\xdb\x36\x10\x7f\x26\x3f\xc5\x55\x08\x36\x29\x55\x28\xec\x35\x43\x80\xa1\x49\xba\x6c\x41\x93\xa0\x31\xb0\x87\x20\x48\x69\xe9\x6c\x13\x91\x29\x95\x3c\xd7\x73\x18\x7d\xf7\x81\x14\x25\xdb\x4b\xd2\x75\x2f\xc6\xf9\xfe\xf0\xee\x7e\xf7\xbb\xb3\x9d\x2b\x0e\x81\x70\xd9\xd6\x92\x10\xa8\x01\x83\xba\x42\x03\x73\x49\xb8\x96\x1b\x58\x10\xb5\x80\xba\x6a\x1b\xa5\x09\x08\x2d\x59\x38\x2c\xe0\xa8\xeb\x78\x51\xc0\x69\x53\x21\xcc\x51\xa3\x91\x84\x15\x4c\x37\xf0\x24\xf5\x93\x9a\x4a\xe3\xad\xbf\x8d\x16\xce\x5b\x59\x3e\xca\x39\x82\x73\xe2\xa6\x17\xaf\xe4\x12\xbb\x8e\x73\xb5\x6c\x1b\x43\x90\x72\x96\x4c\x37\x84\x36\xe1\x2c\x69\x25\x2d\x8a\x99\xaa\xd1\x0b\x5e\xa1\x91\x0a\x5f\x8a\x97\x7d\x11\x4a\xcf\x13\xce\x59\x32\x57\xb4\x58\x4d\x45\xd9\x2c\x0b\x4b\x06\xa9\x5c\x98\x22\xd8\x67\x9b\x42\x5a\x8b\x86\x92\x7d\xaf\xd5\x14\x4d\x31\x14\x19\x5c\x8b\x5a\x4d\x8b\x29\xea\x72\xf1\x10\x9b\xfe\xb1\x10\x2f\x3c\x4c\x65\xf9\x88\xba\xfa\x1f\x11\x63\x8e\x8c\x73\xe7\xd6\x8a\x16\x20\x3e\x21\x2d\x9a\x2a\x80\xea\xdc\x11\x1c\x94\xb5\x42\x4d\x11\x27\x38\x3e\x01\x71\xd6\xac\xb5\x6f\x50\x2e\x77\xe1\xfb\x77\x44\xd0\x1d\x9f\x00\x29\xaa\x71\x37\xe8\x16\xcd\x37\x55\xbe\xf0\x8f\x79\xf7\x13\xbc\x5e\x4c\xaf\x1d\x12\xec\x29\x45\xd0\x3e\xc7\xac\xaf\xc6\x7d\xc6\xaf\x2b\xb4\x34\xd9\xb4\x21\x7c\xb6\xaa\x6b\x2f\x87\x40\x48\xf7\x5c\x33\xb1\xeb\x9c\xee\x63\x91\xbd\xf5\xbc\x6d\x1b\x6d\xf1\x47\xdf\xdf\xf1\x7e\x3b\xc1\x02\x65\x85\xc6\x06\x74\x2e\xa2\xec\xf9\xca\x9d\x33\x52\xcf\x11\x0e\xc4\x04\x2d\xdd\xd2\x6a\x6a\xbd\x7e\xb6\xd2\x25\x78\x8d\x73\xe2\x42\xea\xaa\x46\xf3\xc7\x19\x3c\xc3\xc4\xc3\xd2\x75\xce\x05\xf7\x88\x55\x54\x5e\x5f\x0e\xc5\xa4\x04\x87\x91\xd8\x62\x92\x81\xe3\xec\x9b\x34\x50\x36\x2b\x4d\x68\x40\x69\xe2\x9c\x45\xea\xe4\x80\xc6\x84\x31\xa3\xa5\xdf\x7b\x9d\x38\x35\x28\x09\xe3\xb7\x94\x72\xd0\xaa\xce\xe1\xa7\x5d\x97\xeb\x96\x54\xa3\xad\xe3\x8c\x5d\xea\x66\xad\x2f\x26\x93\x9b\x0f\x3d\x7f\xed\x31\xdc\xdd\x5b\x32\x4a\xcf\x5d\xe2\xdc\x2e\x9d\x9e\xa1\x94\x4b\xac\xbb\x2e\xe9\x72\xce\x98\xef\xe1\x83\xd2\xd2\x6c\x8e\x61\x58\x50\xf1\x67\xa3\x74\xca\x19\x63\x73\xa4\x33\x65\x7c\x5c\x9a\xe5\x90\x08\x91\x8c\x9f\x4b\xa9\xb4\x98\x37\x89\x7f\x24\xcb\x39\xeb\x32\xce\xd4\x0c\xde\xf5\x5b\x2a\xae\x9a\x73\x63\x1a\xe3\x2b\x47\x63\x72\x48\xe6\x0d\xc1\xb4\x69\xc8\x92\x91\xad\xd7\x25\x01\x15\x66\x90\x56\x46\x73\xd6\x71\x56\xe1\x6c\x7b\xa9\xc4\x69\xdd\x58\x4c\x33\xce\xd9\x30\x20\x71\x1a\xda\x18\x26\xc4\x66\xf2\x11\x9d\x8b\xda\x48\xf3\x71\x14\x3d\x6f\x74\x99\xae\xc3\xcd\x1b\x59\xf2\x97\x51\x84\x26\x07\x03\x87\x51\x1f\xd8\xd9\x17\xb3\x16\xc1\xdc\xd3\x23\x75\xee\x20\xae\xb2\xb8\xbe\xbc\x25\x49\x2b\xeb\x0f\xa4\xf0\x1f\x9d\xef\x97\x15\x05\x4c\xae\xcf\xae\xd3\xa7\x75\x76\x3c\xde\x4d\xe8\xd1\x06\x13\x33\x0a\xce\x3c\x32\x0f\xe3\x9c\x63\x96\xf4\xee\xde\x1f\xc8\x14\xbe\x8c\x4d\x0c\x45\xde\x86\xd1\x75\xdd\x97\x2c\xfb\x35\x44\xbd\x3b\xf1\x04\x08\x35\x32\x12\x1f\x25\xc9\x3a\x4d\x4a\xa9\x7f\x26\x58\xfb\xb7\xc0\x63\x31\x66\x4c\x7c\x6d\x1d\x67\x2c\xf2\xed\xfd\x7b\x8f\xef\x48\x38\xb1\xcb\x94\x34\xbb\x7b\x93\x21\xf7\x91\xf8\x1f\x3d\x8e\x9c\xb1\xad\x63\x84\xc5\x3f\xd4\x8b\x5d\xe7\x49\xf1\x9a\xfd\x46\xd2\x22\x58\xbf\x3b\xae\x9c\xb3\x7e\xd4\xa8\xfb\x5b\xc5\xd9\xce\xc2\x2e\x65\x7b\xd7\xd3\x79\x60\x75\xe7\x7d\x41\xcd\xb6\x7b\xed\x83\x46\xaa\x1c\xa8\xea\xef\x7c\xb0\x8d\x57\x6e\xcf\x35\x7e\x09\xdd\x6f\xfd\x7c\xd7\x70\x02\x49\x5b\xcb\x12\x17\x4d\x5d\xa1\x49\x62\x59\xfd\xfb\x47\xd0\x8b\x9c\x19\xb4\xe3\x48\x07\x64\x3f\xc9\x47\x8c\x8c\x1a\x00\x13\xaf\x62\xf5\x8a\x71\x00\x8a\xb3\xa1\x36\x2f\x86\xdf\x50\x71\x85\xeb\xcf\x3d\x29\x23\x69\x3c\x67\xce\xe3\xcf\x78\x4c\xb8\x43\x9a\x80\xe6\x7f\xae\x63\xff\x5f\xc0\xeb\x5f\xec\x22\x67\x31\xf0\xfc\xeb\x4a\xd6\x3e\xec\xfb\xcb\x90\x7b\xee\x89\xad\x3a\x7b\xf9\xc0\x2f\xf9\x70\xfe\x32\xde\xf9\xab\x3b\x4c\x7a\x2b\xfd\x13\x00\x00\xff\xff\xcd\xbc\xd3\x12\xbd\x08\x00\x00")

func endpoint_testTmplBytes() ([]byte, error) {
	return bindataRead(
		_endpoint_testTmpl,
		"endpoint_test.tmpl",
	)
}

func endpoint_testTmpl() (*asset, error) {
	bytes, err := endpoint_testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "endpoint_test.tmpl", size: 2237, mode: os.FileMode(420), modTime: time.Unix(1491850736, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _http_clientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5b\x53\xdc\x3a\x12\x7e\xb6\x7e\x45\xaf\x8b\xa4\x6c\x30\xf6\x3e\x4f\x2d\xbb\x9b\x90\x14\x61\x93\x40\x8a\xcb\xee\x43\x2a\xb5\x25\xec\x9e\x19\xd5\x78\x64\x23\x69\x02\xc4\xd1\x7f\x3f\xd5\x92\x6f\x33\x03\x1c\xea\xe4\xe4\xe4\x5c\x78\x19\x5b\xea\x6e\x7d\xdd\xfa\xfa\x82\x9b\x66\x1f\xb2\x5d\x30\xb8\xac\x4b\x6e\x10\x4c\x05\x0a\x65\x81\x0a\xb0\x98\x21\xcc\xb8\xc1\x1b\x7e\x07\x73\x63\x6a\xc8\x4b\x81\xd2\x40\x5e\x15\x08\xbb\x19\xec\x5b\xcb\xb2\x0c\x0e\xe9\x75\x86\x12\x15\x37\x58\xc0\xd5\x1d\x7c\xe1\xf2\x8b\xb8\xe2\x8a\x76\xff\xdd\xef\x30\x56\xf3\x7c\xc1\x67\x08\x4d\x93\x7e\xf0\x8f\x27\x7c\x89\xd6\x32\x26\x96\x75\xa5\x0c\x44\x2c\x08\xaf\xee\x0c\xea\x90\x05\x61\x5e\x49\x83\xb7\x86\x1e\x25\x9a\x8c\x10\xd0\xb3\x36\x2a\xaf\xe4\xe7\x90\xb1\x20\x9c\x09\x33\x5f\x5d\xa5\x79\xb5\xcc\xea\xc5\x2c\x43\xa5\x2a\xe5\x74\x47\x1b\xab\x2b\x54\x59\x87\x28\x53\x2b\x69\xc4\x12\x43\x16\x34\x8d\xe2\x72\x86\xb0\x23\x8a\xdb\x04\x76\xea\xc5\x0c\x26\x07\x90\x1e\xcb\xbc\x5c\x15\x58\xb4\x00\xb5\xf3\x32\x68\x1a\x12\x48\x5f\x94\x82\x6b\x8f\x19\xc2\x76\x6d\xcd\x13\x67\x17\x65\x61\x2d\x8b\x19\xa3\xd8\xee\xf8\xa0\x1d\xbf\x72\xd6\x0f\xbb\x17\xb2\xda\x21\x48\xcf\x51\x7d\x16\x39\x6a\xb7\xd6\xab\x90\x45\x52\x32\xc2\x94\x08\xa9\x7b\xfd\x0a\xb5\x12\xd2\x4c\x21\x7c\xa6\xbd\xad\x10\xfc\x2d\x34\xcd\x48\xcd\x5a\x10\x1a\xcc\x1c\xd7\xee\x6d\x5a\x29\xd0\xfe\x28\xba\x02\x2f\x98\x32\x73\x57\xe3\x96\xba\x36\x6a\x95\x1b\x68\x58\xd0\x43\xd6\x46\x09\x39\x63\xc1\x9b\x8b\x8b\x0f\x7e\x11\x00\x76\xbb\xc8\xa6\xc3\x32\xb3\x8c\x10\x9d\xe0\x4d\x2b\xa6\xd0\xac\x94\xd4\xc0\x41\xe2\xcd\x53\x20\x4d\x57\x32\x1f\xf4\x23\x16\x74\x34\x1c\x8e\x3b\xf2\x2b\x09\x8b\x61\x77\x13\x7c\xc3\x02\x51\x53\xe8\x5a\xb5\xf4\xb0\x92\x53\x31\x4b\xdf\xaf\xb4\x39\x42\x73\xee\x1c\x89\x42\xaf\xa3\xd3\xf6\x60\xf8\x0a\x39\x5f\x62\x69\x6d\x2a\xea\x30\x66\x81\xa3\xe4\x83\x56\x8e\xa5\x79\xcc\x04\x29\x87\x31\x63\xc1\x15\xd7\x78\x79\xf6\x8e\x0c\x85\xe4\xfa\x24\xcb\x42\xd8\x03\x51\xc3\x1e\x84\x13\x7a\x6c\x19\x9d\x1e\x9b\x8a\x47\x42\x9a\x88\x74\xe3\x98\x05\x3e\x6e\xf0\x7c\xc3\xbf\x86\x05\xfd\xad\x4c\x1c\x0f\x3b\x8e\x59\x1b\x26\x2c\x18\xdd\xd0\xa4\xcf\xc5\xf4\x04\x6f\x86\xf5\xa8\xf5\x29\x81\x16\x5e\x9c\xb0\xc0\xd2\xc5\x35\x4d\xb6\x0b\x70\xf0\xd0\x1f\xbc\x47\x33\xaf\x8a\x47\x04\xba\xca\x30\xd0\xdb\xab\x10\xbb\x3d\x51\x47\x84\xb6\x16\x72\x5e\x96\x9a\xbc\x70\x0c\xfa\xc0\xcd\xdc\xda\x10\x50\x16\x75\x25\xa4\x49\x5d\x46\x88\x29\x70\x59\x40\x84\xd7\x90\x9e\xe1\xf5\x0a\xb5\xb9\x20\xd6\x86\x61\xdc\x2d\xea\xba\x92\x1a\xfb\x55\x6b\x3d\x89\xa2\x7c\x8b\x1e\xf1\x26\x84\x88\x05\xb9\xb9\x85\xb6\xde\xd0\x35\xd3\x6f\xc2\x82\x39\xf2\x02\x95\x86\x25\xaf\x3f\x7a\xf6\x7f\xf2\x3f\xc4\xba\x68\x7b\x15\x5c\x01\x8a\xa1\x61\x4d\x83\xa5\x46\xc2\xbd\x0d\xf9\xb7\xc0\xb6\xdb\x34\x6b\x31\xb1\x36\xb9\x47\xf2\x61\xbc\x6b\xd1\xfc\xee\x80\x03\x05\x1e\x70\x1f\x26\x6b\x9f\x18\xe2\x1f\x06\xed\x17\x44\xd8\xb5\x85\x40\xe1\x35\xd5\x82\x71\x5e\xfa\x9c\x24\xfa\xb7\xe7\x44\x2c\x08\xf2\xbe\x59\x24\x2e\x3b\xda\x06\x93\x40\x3e\x2a\xb5\x09\x0b\xa8\xc6\x64\x19\x1c\xb5\x6d\x16\xa6\xab\xb2\x84\xcb\xb3\x77\x29\x0b\xe8\xb1\x2d\x3d\x63\xa5\xf4\xa5\xcf\x79\xea\x55\xfb\xd0\x76\xc1\x45\x02\x3b\x1a\x67\x4b\xaa\xca\xd4\xa9\x28\x11\xcf\xfd\x7b\xdf\x03\xf7\x5b\x82\x74\x82\xa9\x27\x88\x36\xdc\x88\x3c\x24\xa9\xbd\x30\x6b\x9a\x61\x1b\x6f\x4d\xdb\x13\xf7\xc1\x11\xcc\x8b\x84\x7b\x3e\x3c\x91\x4a\x47\xd2\x2f\xab\xe2\xee\xb8\x40\x69\xc4\x54\xa0\x82\xaf\xbe\xf1\x59\x1b\xb7\xfa\xb2\x18\x70\xf8\x58\xd2\xb3\x98\x82\xc4\xcd\x14\x23\x31\x54\x8a\x1c\x51\x78\x9d\xfe\x4f\x09\x83\xff\x39\x3f\x3d\x89\xba\x32\xe3\x4b\x92\x0b\x67\x1b\xa4\x04\x5a\x16\x24\xa0\xdc\x89\x2d\xbb\xbe\xc1\x8e\x14\x65\xdc\xcf\x03\xd0\x0e\x5a\xff\x10\xd3\x75\xb4\x92\x00\xff\xb3\xab\x9a\x01\x45\x58\x29\xf8\xdb\x01\xa9\x53\x27\xeb\xba\x80\x73\xf5\x9e\xec\xb4\x56\x8a\xd2\x11\xad\xc3\xec\xde\x47\x8b\x9e\x77\x8e\x7a\xda\xad\x75\xfe\xbc\xaa\xa2\xdc\xdc\xc6\xdf\xf5\x50\x77\x6a\xfd\xa6\xcd\xb0\xc9\xc1\x76\x92\x34\x96\x05\x34\x07\x2c\x1c\x2c\xc7\x46\x85\x3a\xf5\x2a\x2d\x98\xde\xc2\xc7\xc5\x27\x38\x18\xed\xa7\x47\x68\xa2\x45\xdc\x9f\x94\x1e\xce\x31\x5f\x9c\xbe\xed\xf0\x46\x1f\x3f\x09\x69\xc8\xc8\x88\xeb\x42\x16\x48\x33\x9f\x1b\x64\x89\xec\xff\xe5\xa5\x28\xce\x0d\x37\x2b\x4d\xd3\x6c\x4b\x78\xcf\x2e\x2f\x6d\x6d\xd2\x3a\x45\x55\xa6\x2a\xb0\x15\x18\xf1\xd2\xc6\x1d\x21\x47\xbd\x6a\xa3\x2d\xd1\x6a\x54\xa2\x84\xf4\xf5\x6d\x8e\xb5\x11\x95\xd4\x31\xfc\x3d\x26\x7d\x7d\x23\x4c\x3e\x77\xbe\x0d\x50\x9c\xff\x39\xd7\x6e\x3c\x3a\x7d\x3b\x6c\xa4\x87\x0e\xc4\x84\x05\x01\xa5\xff\xc5\xe9\xab\xd3\x09\x94\xd5\x0c\xf8\x55\xb5\x32\xb0\x92\x78\x5b\x63\xee\x06\xf2\xaa\xb8\x03\x37\x55\xff\x8b\x84\xff\xef\x29\xe0\x83\x78\x86\xbc\x78\x51\x96\x51\x4c\x3b\xdb\x2c\xe8\x79\x30\xba\x01\xa7\x4e\x7b\x14\x80\x7b\xf7\xa5\x28\x1d\xdd\xd6\x9a\xca\x3d\x5e\x7f\x9b\xd3\x9f\xb9\x72\xc7\x52\x7c\xa9\x74\xc0\x56\x41\x26\xa9\x0d\x57\x65\x71\x29\x97\x5c\xe9\x39\x2f\x49\x27\x7a\x3e\xb6\xf0\x73\x41\x70\xec\xbe\x3f\x12\xa3\x50\xac\x99\x4c\x9e\x10\x99\xed\xdc\xfa\x23\x72\xe1\x51\x32\x6c\xfe\xb3\x85\x1d\x0d\x5c\xf6\x0d\xa4\x70\x77\xd6\x7a\x38\x08\xa5\x0f\x13\x60\x30\xb4\xa6\xf0\xf4\xfb\xef\x75\x7e\xd5\x0c\x18\xcc\x3a\xdf\xdb\x62\x18\x14\x38\xe5\xab\xd2\xfc\xd8\x9c\xb5\xe3\xe6\xf6\x17\x4c\xbf\x3f\x01\x17\x1f\x89\xc4\x63\x42\xbf\x0b\x56\x3e\x86\xdd\x0e\x5f\x4f\xd8\xda\x04\xe2\x27\xbc\xfb\x26\x90\x56\x7e\xd3\x60\xa5\x74\xfa\x9a\x7e\xa6\x34\x4a\x87\x97\x83\x0f\xe3\xaf\x0f\x1d\x55\x20\x7a\x56\xc4\x61\xb2\x91\x06\x6e\xb6\xb6\x6c\x73\x7e\x5b\xff\xa7\xb6\x1f\xdc\x1e\x10\xeb\x3e\xed\xf4\x72\x3f\x05\x00\x00\xff\xff\x82\xab\xfb\x46\x70\x13\x00\x00")

func http_clientTmplBytes() ([]byte, error) {
	return bindataRead(
		_http_clientTmpl,
		"http_client.tmpl",
	)
}

func http_clientTmpl() (*asset, error) {
	bytes, err := http_clientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "http_client.tmpl", size: 4976, mode: os.FileMode(420), modTime: time.Unix(1492720389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _init_clientsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcf\x8a\xdb\x30\x10\xc6\xcf\xd1\x53\x0c\x61\x29\x49\xc8\x5a\xf7\x85\x42\xcb\x42\xcb\x5e\x96\x1e\xf6\x05\x26\xd6\xc4\x1e\x22\x4b\x46\x1a\x91\x3a\xc2\xef\x5e\xfc\x2f\xa9\xbb\xf4\xa8\x99\xef\x9b\x99\xef\x87\x72\x7e\x06\x7d\x00\xa1\xa6\xb5\x28\x04\xe2\x21\x90\x33\x14\xa0\x42\xa1\x2b\x76\x50\x5a\x26\x27\xc0\x8e\x85\xd1\xf2\x0d\x85\xbd\x83\x83\x86\xe7\xbe\x57\x5a\xc3\xab\x37\x04\x15\x39\x0a\x28\x64\xe0\xd4\xc1\x0d\xdd\x8d\x4f\x18\x86\xee\xb7\x7b\x47\xa9\x16\xcb\x0b\x56\x34\x4f\x8c\x4a\x71\xd3\xfa\x20\xb0\x53\x9b\x9c\x03\xba\x8a\xe0\x89\xcd\xef\x23\x3c\xb5\x97\x0a\x5e\xbe\x42\xf1\xe6\x4a\x9b\x0c\x99\x5f\x93\x33\x8e\x3b\x37\x39\x0f\x82\xe2\xbb\x65\x8c\xef\xd8\x50\xdf\xc3\x76\xae\xcd\xc2\xa9\xba\x1d\xa4\xe4\xcc\xe0\xd9\x56\x2c\x75\x3a\x15\xa5\x6f\x74\x3a\x51\xd0\xcb\x91\x3a\x24\x27\xdc\xd0\x56\xed\xd5\x18\x67\x3a\x0e\x0c\x0a\x46\x09\xa9\x94\x14\x08\xa4\x46\x81\xda\x5b\x13\x01\xad\x05\xa9\xff\x8e\xbc\xe4\xd1\x1a\x3e\x6a\x8e\x10\x6b\x9f\xac\x01\xef\x6c\x37\x7a\x16\xc1\xdd\x02\xe7\xe0\x1b\x88\x2d\x95\x51\x49\xd7\xd2\x7d\xe9\xb4\x10\xf2\x27\x20\xd3\x84\x37\x77\xf6\x23\x97\xd7\xc7\x73\x21\xf2\x50\x14\x3f\x98\xac\x99\xc1\x1c\xd6\xad\x15\x9f\x62\xdd\xfb\xe8\xda\xb9\xf1\xe0\xd6\x4f\x4c\x02\xa1\xd0\x72\xe4\x95\xad\x85\x06\x2f\x34\xa2\x58\xc2\x9f\x93\x2b\xd7\xc2\x9d\xda\x2c\x7f\xe8\xb0\xd0\x2e\x7e\x4e\x95\xa3\xda\x03\x3b\xa1\x70\xc6\x92\x72\x3f\x24\x0e\x24\x29\x38\xf8\x32\xbb\xb3\xda\x7c\x82\xc0\xff\xcb\x3f\x02\xe0\x7f\xb2\xbf\xc0\xbd\xba\x8e\xfd\x4e\xd7\x69\xc0\x6e\xbe\x6f\x7f\x1c\x47\xcc\x5f\x65\x48\xfd\x27\x00\x00\xff\xff\x32\x9f\xe9\x0a\x17\x03\x00\x00")

func init_clientsTmplBytes() ([]byte, error) {
	return bindataRead(
		_init_clientsTmpl,
		"init_clients.tmpl",
	)
}

func init_clientsTmpl() (*asset, error) {
	bytes, err := init_clientsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init_clients.tmpl", size: 791, mode: os.FileMode(420), modTime: time.Unix(1492720389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x6e\xdc\x36\x10\x3d\x93\x5f\x31\x25\x72\x90\x8c\xb5\xd4\x73\x00\x03\xdd\xae\x11\x63\x8b\xc2\x0e\xd6\x01\x7a\x28\x0a\x63\x56\x9a\xa5\x99\x50\xa4\x30\xa4\x9c\xda\xaa\xfe\xbd\xa0\xa4\x95\xd7\xb1\x0d\xe4\x46\x72\xde\xbc\x79\xf3\x66\xa4\xbe\x3f\x87\xf2\x0c\x22\x35\xad\xc5\x48\x10\x3d\x30\xb9\x9a\x18\x34\x46\xfa\x8e\x8f\xd0\xa0\x71\x85\xf6\x70\x56\xc2\xf9\x30\xc8\xb2\x84\x8d\xaf\x09\x34\x39\x62\x8c\x54\xc3\xfe\x11\x9e\xd0\x3d\x99\x3d\x72\x8a\xfe\xb6\x44\xa4\x6c\xb1\xfa\x86\x9a\x46\x0e\x29\x4d\xd3\x7a\x8e\x90\x49\xa1\x7c\x50\x52\xa8\x16\xe3\x7d\x79\x30\x96\xd2\x21\x3d\x70\xe7\xa2\x69\x48\x49\x29\x94\xf6\x45\xb7\x27\x2e\x3c\xeb\xf2\x09\x5b\x25\x01\x00\x94\x36\xf1\xbe\xdb\x17\x95\x6f\xca\x14\x2d\x8f\x95\xcb\x25\x55\xf4\x3d\xa3\xd3\x04\x1f\x4c\xfd\xef\x0a\x3e\xb4\xdf\x34\x7c\xbc\x80\x62\xeb\x2a\xdb\xd5\x54\x7f\x9e\x34\x85\xb1\x1b\xd1\xf7\x09\x50\xac\xad\xc1\x70\x8d\x0d\x0d\x03\xa8\xf9\x6d\x06\x4e\xaf\x23\x2f\xb9\x7a\x18\x64\x2e\xe5\xa1\x73\x15\x68\x8a\x97\x86\x53\x38\xcb\x21\x44\x36\x4e\x43\x2f\xc5\xdd\x0a\x52\x4b\x2b\xb8\x5b\xc1\x5d\xaa\x3c\x2b\x2b\x36\x68\x2d\x71\xf6\x6b\x2e\x05\x53\xec\xd8\x2d\xb6\x15\x57\x23\x95\xc3\x86\x3e\xb1\x6f\x76\x53\xc2\x8c\x4f\x64\xb9\x1c\x9e\x8b\x6e\xbc\x3b\x18\xfd\x56\xe9\x99\xf6\xe8\x68\xf1\x87\x37\x2e\x93\x42\x9c\x2a\x5d\x49\x21\x54\xdf\x17\x3b\xb2\x18\xcd\x03\x7d\xc6\x78\xff\xc5\xaf\xdb\x76\xa2\x1d\x06\x35\x22\xaa\xf1\x96\xce\x6f\xd4\xce\x72\x38\x5b\xb4\xdf\x46\x8c\xa6\x9a\x02\x27\x22\x96\xf8\x35\x7d\x3f\x85\xdc\xf0\xa5\xa1\xec\xef\x7f\x26\xd5\xbd\x14\xe2\xa5\xdc\x17\x5a\x41\x1d\x69\xce\x6b\x3a\x60\x67\x63\x28\xbe\x06\xef\xd4\xd8\xc6\xab\xc4\x1f\x9c\x59\x81\x6a\xd9\xd7\x5d\x15\x8d\x77\xef\xe6\xf9\x90\xec\x27\xf7\x90\xa9\xcd\xcd\xf5\xa7\xed\xd5\xdd\xe5\x76\xa7\xde\x4b\x1e\x56\xe0\x8c\x7d\xf6\xa4\x62\xc2\x48\x57\xd3\xb7\x92\xe5\x90\x3d\x1b\x33\x3f\xae\x80\x98\x3d\xe7\xc9\x9b\xc9\xd5\xb4\x14\x27\x5e\x4a\x21\x85\x3e\xc1\xa6\xf0\x42\xb2\x79\xc1\x3f\xe5\xcf\x12\x84\x39\x8c\xf0\x5f\x2e\xd2\x3d\xd1\x1f\xbd\x77\xc6\x8e\x4c\x52\x0c\x52\x8a\xca\x1a\x72\x31\x24\xda\xf9\x38\xb3\x6e\xa6\x5b\x36\x17\xcf\x17\x19\xc5\x1c\x81\x25\x43\x2e\x73\x5d\x94\x3a\x63\x17\x17\xac\xd7\x6b\x57\xff\x85\x26\x66\x81\xf8\x81\x18\x5e\xd9\x30\xf6\x3f\x05\x8b\x3f\xbd\xd6\xc4\xc5\xd6\x1d\x7c\xa6\x6e\x23\x72\xfa\x8d\xf4\xfd\x11\x9a\xa6\x07\xff\x41\x8b\xa1\x42\x3b\x2f\xe4\x13\xb6\xc5\xed\xb8\x32\x99\x62\x42\xbb\xae\x6b\x56\x2b\x98\x09\x77\xf3\x4b\x7e\x84\xae\xdd\x63\xb6\xec\xf0\x11\xb5\x75\xa1\xa5\x2a\x4e\x1b\x98\xe7\xe3\x6e\x4b\x51\x96\xf0\xe5\xe6\xf2\xe6\x23\xdc\xa3\xab\x2d\x41\x30\x3a\x12\x37\xa0\x19\x2b\x3a\x74\xd6\x3e\x2e\xba\xc7\x06\xf3\x93\x14\x6a\x4c\x84\x86\x22\x9b\x2a\x00\xee\x7d\x17\x21\xa4\x76\xba\xb6\x38\x41\x05\x8a\x5d\x0b\xe8\x6a\x98\x14\x75\x4c\x10\x19\x2b\xe3\x74\xf9\x95\x30\x59\xb1\x38\x99\xfe\x94\xd9\x89\x57\xcb\x46\xfc\xb0\x68\x6f\x4d\xbf\x45\x67\xaa\x8c\x98\xf3\x69\xf0\x29\x7c\x71\x6c\xfe\x77\xef\x63\x88\x8c\x6d\x46\xae\x6e\xbd\x49\x6b\xb0\x23\x6d\x42\x24\xfe\x09\x36\xf1\x6a\xc4\xe9\x1b\xf8\x3f\x00\x00\xff\xff\xbb\x13\xf3\xcb\x3e\x06\x00\x00")

func mainTmplBytes() ([]byte, error) {
	return bindataRead(
		_mainTmpl,
		"main.tmpl",
	)
}

func mainTmpl() (*asset, error) {
	bytes, err := mainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.tmpl", size: 1598, mode: os.FileMode(420), modTime: time.Unix(1492720389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _main_testTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x6e\xe3\x36\x10\x3d\x93\x5f\x31\x2b\xec\x41\x0a\xbc\x54\xdb\xe3\xa2\x06\x9a\xba\x6e\x9a\x22\xeb\x04\x96\x17\x8b\x9e\x0c\x46\x1a\xd3\x44\x64\x52\x18\x52\xce\x3a\x86\xfe\xbd\x18\x5a\x76\xb2\xc8\xad\xe8\xc1\x86\x38\xf3\xf4\xf8\xde\x9b\x81\x8e\xc7\x4f\x50\x5e\x41\xc4\x5d\xd7\xea\x88\x10\x3d\x10\xba\x06\x09\x8c\x8e\xf8\xac\x0f\xb0\xd3\xd6\xad\x23\x86\xa8\x8c\x07\xb9\xda\xda\xf0\x8a\xe6\xe7\x2d\x02\x77\x01\x5d\xa4\x43\xe7\xad\x8b\xb0\xf1\x04\xa1\xd3\xcf\xce\x3a\x03\xfa\xcc\x24\x75\x00\x0d\xf5\xd6\xb6\x0d\x74\xe4\x6b\x0c\x01\xfa\xc0\x90\x0b\x47\xed\xf7\x48\xda\x20\x6c\x50\xc7\x9e\x30\x00\xc6\x5a\xc9\xab\x12\x3e\x0d\x83\x2c\x4b\x98\xf9\x06\xc1\xa0\x43\xd2\x11\x1b\x78\x3c\xc0\x8b\x76\x2f\xf6\x51\x13\x77\x7f\xbb\x74\xa4\xec\x74\xfd\xc4\x4c\x2c\x5f\x4a\xbb\xeb\x3c\x45\xc8\xa5\xc8\x7c\xc8\xd2\x7f\x19\xac\x71\xba\xe5\x43\x38\x84\x5a\xb7\xe9\x91\x65\x58\x67\x32\x29\x45\x66\xbc\xea\x1f\x91\x94\x27\x53\xbe\xe8\x2e\x7b\x5f\xe2\x5f\xed\x09\x53\xcb\xc6\x6d\xff\xa8\x6a\xbf\x2b\x19\x52\x9e\x85\x95\xd4\xbb\x68\x77\x8c\x39\x1e\x49\x3b\x83\xf0\xd1\x36\xdf\x27\xf0\xb1\x7b\x32\xf0\x79\x0a\xea\xd6\xd5\x6d\xdf\x60\xf3\x70\x92\x1c\x92\x59\x71\x3c\x32\x40\x5d\xb7\x56\x87\x85\xde\xe1\x30\x40\x36\xd6\x46\xe0\xa9\x9a\x78\xd1\x35\xc3\x20\x0b\x29\xf7\x9a\xa0\xd6\xf5\x16\x9b\x0a\x69\x8f\x04\x57\x67\x1d\xea\x66\x1c\x83\xdc\xf4\xae\x86\x15\x86\xf8\x45\x5b\x97\xef\xe0\x6a\x34\xad\xbe\x14\x70\x94\xc2\x6e\xc0\x07\x75\x83\x11\xdd\x3e\xcf\x6e\xae\x57\xf3\x6f\xd7\xff\xac\x97\x5f\x17\xeb\xd9\x5f\xb7\x77\x7f\xac\x1f\x96\xf7\xb3\x79\x55\xad\x57\xf3\x6a\x95\x15\xf0\x61\x0a\x59\xc6\xef\x89\xd6\x86\x88\xee\xde\x55\x29\xd8\x90\x17\x52\x0a\x51\xf3\xc4\x3e\x4f\x61\xa7\x96\xbd\xcb\x0b\x29\x84\x0f\x6a\xfe\xdd\xc6\x9c\x3b\x85\x14\x03\x60\x1b\x30\x11\x9c\x3b\x3f\x71\x59\x0e\xa3\xd2\x77\xb4\x8c\x0d\xd6\x84\x44\xab\x9f\x30\xaf\xb7\xda\xb1\xe6\x13\x62\x02\x3f\xf3\xcd\xa7\xf1\xaa\x85\x8f\x76\x73\xc8\x19\x3f\x81\x71\xd0\xaa\xba\xbd\xf9\x5a\x2d\x7f\x61\x98\xf1\xc0\xb7\x9c\x58\xc5\x1a\xa6\xf0\xeb\x27\x06\xb3\x76\xbb\xf9\x31\xcb\x0f\x53\x70\xb6\x4d\x40\xf1\xb6\xa1\x66\xad\x0f\x98\xcc\x0d\x52\x0c\x79\x71\xd1\xce\x29\x57\x51\x53\x1c\xc3\xcf\xe3\x6b\xda\xab\x74\x25\x9f\xee\xbc\x31\x48\x6c\xe7\x45\x77\x6a\x81\xcf\xb9\x14\x62\x5c\x2d\x3e\xce\x3c\x21\x97\xde\xd6\xfe\xae\xee\x17\x73\xc7\x19\x52\x3e\xbe\xf5\x40\xbe\xe9\xeb\x68\xbd\x1b\x1b\x33\xef\x36\xd6\xe4\x45\x31\xe1\x97\x39\xa0\xd8\x20\xd1\x64\xa4\x52\xb7\x6e\xe3\xef\x70\x8f\x2d\x57\x18\x94\x72\x4b\x96\x26\x80\x94\x14\xd5\x84\x3a\xe2\x59\x7e\x91\xd6\x83\x5b\x6f\xb2\x78\xb5\xa0\xe6\x44\x9e\x92\xd4\xec\x4f\x6d\x5b\x6c\xf8\x83\x32\x7b\x4b\x01\xd6\xbd\x4f\xa5\xc8\x2e\x9a\xaa\x48\xd6\x99\x3c\x43\x66\xca\x92\x8c\x91\xf5\x64\x83\x43\x26\x8c\x3d\x39\xde\x11\xf9\xc3\x1c\x60\x0a\x27\xf5\x52\xb0\xc4\xf3\x49\xfd\xee\x7d\x0c\x91\x74\x97\xa3\x6b\xd2\x27\x2a\xa8\x25\x1a\xde\x2b\xfa\x4f\x8e\x2e\x84\xff\xaf\x1b\xd1\x7a\x73\xed\x9a\x6f\xda\xc6\xfc\x24\x9d\x37\xe9\xdf\x00\x00\x00\xff\xff\xd8\x2f\x98\x3e\xa3\x05\x00\x00")

func main_testTmplBytes() ([]byte, error) {
	return bindataRead(
		_main_testTmpl,
		"main_test.tmpl",
	)
}

func main_testTmpl() (*asset, error) {
	bytes, err := main_testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main_test.tmpl", size: 1443, mode: os.FileMode(420), modTime: time.Unix(1491598180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _structsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x6e\xdb\x3a\x10\x3c\x8b\x5f\x31\x10\x72\xb0\x0d\x47\xca\x39\x78\x79\x68\x91\xa2\x45\x0f\x2d\x8a\xa4\x77\x87\x16\xd7\x32\x1b\x89\x54\xa9\x55\x53\x87\xe5\xbf\x17\x94\x28\x0b\x69\x91\xea\x44\x71\x77\x66\x87\x33\xeb\xfd\x25\xca\x0d\x98\xda\xae\x91\x4c\x60\x0b\x47\x46\x91\x03\xa9\x9a\x50\x4b\xa6\x27\x79\xc2\x91\xb9\x43\xd5\x68\x32\x8c\xca\x2a\xc2\xa6\xc4\x65\x08\xa2\x2c\x71\x1b\x7f\x6b\x32\xe4\x24\x93\xc2\xfe\x84\x67\x69\x9e\xf5\x5e\xba\x58\x7d\x73\xae\x08\xd1\xc9\xea\x51\xd6\x04\xef\x8b\x2f\xd3\xf1\xb3\x6c\x29\x04\x21\x74\xdb\x59\xc7\x58\x89\x2c\x77\x83\x61\xdd\x52\x2e\xb2\xbc\x93\x7c\x2c\x0f\xba\xa1\x78\xc8\x85\xc8\xf2\x5a\xf3\x71\xd8\x17\x95\x6d\xcb\x61\x4f\xae\x9c\x27\x95\x0b\xca\x7b\x27\x4d\x4d\xb8\xd0\xea\xe7\x16\x17\xdd\x63\x8d\xeb\x1b\x14\x1f\x4d\xd5\x0c\x8a\x54\x1a\xdc\x8f\xea\x33\xef\x63\x43\xf1\xb6\xd1\xb2\x9f\xb4\x20\x4f\x77\x2f\x14\x8e\xbc\x64\x54\x08\x62\x2d\xc4\x61\x30\x15\x6a\xe2\x77\xda\xc5\xf2\x6a\x8d\x9e\x9d\x36\x35\xbc\xc8\x76\x5b\x44\xc5\x5b\xec\xb6\xd8\xc5\xc9\x49\x59\x71\x2b\x9b\x86\xdc\xea\x6a\x2d\x32\x47\x3c\x38\x73\xb6\xa9\xf8\x30\x52\x19\xd9\xd2\x7b\x67\xdb\xbb\x09\x90\xfa\x23\xd9\x5a\x04\x21\xe6\x77\x15\xf7\xe4\x7e\xe8\x8a\xfa\x30\x5e\x96\x1b\xe0\xe6\xb5\x0f\x9f\x88\x8f\x56\xfd\xa3\x61\xce\x71\xa1\x9f\x20\x91\xdd\x7b\x7d\x40\x43\x06\xc5\x1d\x7d\x1f\xa8\xe7\x7b\x76\x43\xc5\xf8\x05\x43\xb8\x0a\x01\x69\x77\xe6\x84\xa3\x0b\xb1\xce\x16\x4f\x4e\x76\x70\x13\x0a\xd2\xd5\xfd\xb2\x2e\xde\xcf\x74\x5f\x4f\x5d\x34\x5c\xf7\xe0\x23\x4d\x1b\xb6\xb7\xea\x04\x3e\x75\x84\x83\x75\x20\xa3\x3a\xab\x0d\x47\xcc\x94\x43\x21\xc6\xe2\x5f\x1c\x69\xb2\x5f\xe2\xff\x43\x73\x4a\x9b\x35\x37\x84\x44\x16\x69\x12\xfe\xe1\x5b\x6f\xcd\x75\x7e\x9e\x93\x3f\xa4\xc0\x47\x60\x58\x8e\x22\xad\xc1\xfc\xf6\xff\x5e\xba\xf6\xff\xec\xe7\x2b\x6d\x73\x76\xe7\xbe\xdf\x01\x00\x00\xff\xff\xf5\xbf\x7c\x46\x7f\x03\x00\x00")

func structsTmplBytes() ([]byte, error) {
	return bindataRead(
		_structsTmpl,
		"structs.tmpl",
	)
}

func structsTmpl() (*asset, error) {
	bytes, err := structsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "structs.tmpl", size: 895, mode: os.FileMode(420), modTime: time.Unix(1492720389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tchannel_clientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6f\xdb\xb8\x12\x7e\x96\x7e\xc5\x54\xe8\x09\xa4\xd4\xa1\xdf\x0d\x04\x38\x41\x72\xd0\x06\x38\x6d\x83\x36\xe7\xe9\x60\x51\x30\xd4\x58\x26\x22\x53\x2a\x49\xd9\x49\xb5\xfa\xef\x0b\xde\x74\x89\xed\xf4\xb2\xdd\x6c\xd1\xad\x5e\x2c\x91\xc3\x99\x6f\x86\x33\xdf\x90\x6e\xdb\x13\x98\x1f\x83\xc6\x75\x5d\x52\x8d\xa0\x2b\x90\x28\x72\x94\x80\x79\x81\x50\x50\x8d\x5b\x7a\x0f\x2b\xad\x6b\x60\x25\x47\xa1\x81\x55\x39\xc2\xf1\x1c\x4e\xba\x2e\x9e\xcf\xe1\xdc\x7c\x16\x28\x50\x52\x8d\x39\xdc\xdc\xc3\x27\x2a\x3e\xf1\x1b\x2a\xcd\xec\xbf\xfb\x99\xd8\x7c\x5e\x51\x76\x4b\x0b\x84\xb6\x25\xfe\xf5\x0d\x5d\x63\xd7\x01\x57\x23\x1d\xd6\x42\xa3\x30\x37\x70\xd6\xf4\x16\xa1\x92\xb0\xa2\x22\x2f\x11\xae\xcf\x57\x54\x08\x2c\x81\xd1\xb2\x54\xd0\x28\x2e\x0a\xb8\x5e\x49\xbe\xd4\x24\xae\x0f\xa8\x8f\x63\xbe\xae\x2b\xa9\x21\x8d\xa3\x84\x55\x42\xe3\x9d\x4e\xe2\x28\x41\x29\x2b\xa9\xcc\x9b\xd2\x92\x55\x62\x63\x5e\x35\x5f\x63\x12\xc7\x51\x52\x70\xbd\x6a\x6e\x08\xab\xd6\xf3\xe6\x06\xe5\x3c\xf8\x35\x97\x8d\x08\x42\x6d\x2b\xa9\x28\x10\x9e\xf3\xfc\x6e\x06\xcf\xeb\xdb\x02\x16\xa7\x40\x2e\x05\x2b\x9b\x1c\x73\x8f\x42\xd9\x60\x45\x6d\x6b\x04\xc8\x59\xc9\xa9\xf2\x7e\x27\x7e\x6c\x02\x37\x31\xa2\x28\xf2\xae\x8b\xb3\xd8\xc6\xed\x52\x68\x94\x4b\xca\x50\xc1\xb2\x92\xa0\x57\x08\x0a\xe5\x86\x33\x04\x2a\xf2\xb0\x33\x0f\xa6\x14\xe4\xb8\xe4\x02\x73\xe0\xc2\x8e\x5f\x5e\xfc\x97\xc4\x6d\x3b\x3f\x86\xeb\xb7\x17\x6f\x17\xc0\xa8\x32\x3b\xd9\x75\x71\xdb\x3e\x77\x3a\x2e\x2f\x2c\xfe\xf3\xf0\x71\x32\x9e\x34\xe8\xcc\xb4\xe6\xba\xc4\x91\xd0\xef\x50\x4b\x2e\xf4\x12\x92\x7f\x29\x37\x98\xf8\x85\x3e\x38\x6a\xc3\xac\xda\xf7\x1e\x98\xcb\x1c\xbb\x95\x6d\xeb\xb4\xf5\xf6\x5d\x32\x18\xb8\x3c\x38\x0d\x7a\x45\xb5\x77\x46\xf5\x1e\x62\xc8\x09\x39\x8e\x41\xbf\x88\xc4\xfa\xbe\xc6\x47\x8c\xf4\xda\xdb\x61\x1b\xc9\x6b\xd4\xab\x2a\x37\x00\x23\x00\x80\xb6\xe5\x4b\xab\x3d\xc5\x8f\x40\xde\xe1\xc7\x06\x95\xbe\x36\x7a\x93\x24\x0b\x83\xaa\xae\x84\xc2\x30\x6a\x96\xfa\xb5\x27\x40\xdc\x86\xa6\x7e\xc8\x3c\x4c\xdf\x81\x4f\x41\x72\xee\x7e\x67\xa3\x69\x89\x1f\x5f\x21\xcd\x51\x2a\x58\xd3\xfa\xff\x4a\x4b\x2e\x8a\xdf\xdc\x4f\x90\xcb\x60\xac\xf0\xa0\x98\x79\x6c\x86\xf7\xeb\x82\x53\x58\x2a\x04\xbe\x84\x5d\xa7\x9e\x1c\xfd\x71\xdb\x4e\x42\xd8\x75\xb3\xef\xe9\xdb\x64\x6f\x9e\xc0\x39\xf3\x50\x59\x28\xef\x57\x1f\xda\xc1\xad\xcf\x6d\xde\x8e\x5b\x91\xf3\xe9\x07\x04\xff\x1d\xf7\xae\x27\x3c\xf7\x62\xe9\xa3\xb3\xd4\xf7\x06\xb7\x8e\x53\x40\xa2\x6e\xa4\x50\x40\x41\xe0\x76\xd4\x08\x06\xf2\x0b\x9c\x38\xa2\xb3\xae\x23\xf1\xb2\x11\x6c\xd0\x93\x86\xa6\x76\x1c\x08\x9d\xbc\x74\x23\x99\xf1\x68\xc4\x75\x5d\x07\x6d\x1c\x42\x6e\xba\xe4\x8a\xab\x40\x4e\xc1\x54\xce\x15\xab\x36\x28\xef\xfb\x11\x61\x58\xd2\xb2\x6a\xe4\x87\x02\x6f\x7a\xc3\x66\x7b\x96\xbc\x20\xaf\x1b\xa5\x5f\xa2\x7e\x6f\x83\x93\x26\xce\xae\x22\x53\xf0\x23\x15\x49\x16\x47\x8a\x4d\x14\xb9\x10\x10\xa3\xa5\xb9\xf1\x5f\xe9\x68\x49\x16\xc7\x11\xaf\xbf\xd5\x36\xaf\x8d\x49\xdb\x38\x0f\x6a\xb8\x14\xfa\xd0\x72\xb3\xd0\x61\x26\x57\x88\x52\xa5\x19\x39\xcb\xf3\x94\xd7\xf0\x02\x92\x45\x02\x2f\xc0\x77\x5d\x72\xa9\x2b\x9a\x72\xa1\x53\xb3\x24\xcb\x32\xdb\x58\xfb\x36\x95\x96\x4d\x06\x6b\x7a\x7f\x63\xa2\xae\x4d\xf4\x15\x02\xd5\x50\xa3\x84\xb5\xe5\x6b\x28\x71\x83\x65\x38\x94\x44\xa6\x39\x57\x8d\x76\xad\x6a\x8d\xe4\x35\x2f\x4b\xae\x90\x55\x22\x87\x63\x37\x74\xd1\x48\xaa\x79\x25\x52\x47\x1b\x5f\xed\x9b\x37\x91\x64\xb3\x38\xca\x7a\x8b\x57\x28\xcf\xb4\x39\x4b\x3d\x85\xed\xc1\x98\x47\x11\x47\xbe\x14\x16\xa7\xfd\x19\x8c\xbc\xc1\x6d\xa8\x94\x69\xfa\x87\xe4\x31\x45\x78\xd4\x8b\x4f\x65\xdf\xd6\x06\x67\x1b\x47\x51\xf4\x7e\x48\xaa\x85\xaf\xe1\x51\x9e\x19\x25\xd1\xb5\xc3\x15\xa6\xcd\xe3\xa1\x8e\xa7\x07\xd8\x0b\xd8\xf1\xc4\x08\x76\xde\x19\x57\xee\x70\xf4\xa0\x24\x5d\x45\x46\x7b\x4a\x52\xdb\x53\xe0\xa4\x0e\x67\x90\xf3\xe5\x12\xa5\x25\x08\x59\xad\xbf\xac\x6c\x23\xa7\xc9\xbb\xbc\xb0\x87\x34\xb5\x61\x9e\x74\x13\x03\xd2\x21\xea\x5d\x75\x9f\xb3\x38\x0a\xac\xf5\x90\x47\x3c\xc4\x7d\xa4\x95\x57\x5b\xa1\xb4\x44\xda\xa3\xf3\x47\x97\x87\x3a\x94\x96\x0d\xd3\xe6\xb8\x32\xc1\x07\x8e\x5d\xfb\xdd\xf7\xcf\x74\x4b\xdd\x7e\x1a\x70\x7b\x8e\x3a\x81\xe2\xbe\xe5\xac\x13\xcc\x59\x9f\x7d\x84\x80\x10\xd2\x4f\x58\xf2\x4d\xd9\x0e\xb5\x66\x83\x7c\x1a\x8f\x52\x66\x7f\x23\x1b\x0b\x3c\xde\xca\xc6\x92\x19\xa4\x87\x1a\x6c\xe6\xa9\x3d\x3c\x1b\x2a\x41\xa2\x6a\x4a\x6d\x70\xbd\x44\x61\xee\x35\x57\xb7\x85\x43\x48\x26\x19\xf0\xa1\x47\xfe\xe1\x9d\x5d\x12\x4f\x54\xd9\x16\xba\x38\x35\x99\xfb\xe5\x8a\xce\x64\xa1\x5a\x7f\xea\xb4\xc5\xd5\x30\x86\x4a\xcd\x0c\xa8\xda\xbb\x6b\xa1\x1b\xcd\x8c\xb8\x48\x92\x73\x5a\x96\xe9\xb0\xc8\x87\x6f\x06\x8c\x4c\x52\x64\x66\x52\xb8\x4f\xdf\x51\x00\x67\x16\xec\x0c\x8e\x9c\xeb\xb3\x41\x95\xa9\xc0\xf0\x6e\x4e\x53\x52\xc2\xe9\x29\x08\x5e\xc2\xd1\x11\x3c\xf3\xe8\x4c\x2e\x0e\x88\xb7\x5c\xb3\xd5\x64\xc8\x25\x96\xcf\xb7\xff\xdc\x31\xb4\x7c\xe2\x6f\x43\x53\xd4\xe6\x2a\xe2\x40\x90\x21\x8f\x9e\x59\x8b\x0b\xc3\x1e\x63\x61\x0b\x66\x47\x7a\xc7\x6e\x38\x47\x4c\xc7\x73\x5c\xd2\xa6\xd4\x07\x94\xba\x1b\xa1\x61\xcd\x34\x91\xc8\x90\x6f\x30\x07\x51\x85\xd4\xa8\x24\x34\xe2\x56\x54\x5b\x01\x18\xdc\xb1\x45\x3c\x65\x88\x6c\x64\x73\xb4\xa7\xdd\x4e\x48\x9d\x83\x26\x66\x63\x28\x9e\xf9\x04\x2f\xed\x8e\x8f\x15\x78\xc5\x5e\xe2\x61\x6e\xc4\x83\x20\xf8\x9a\x7e\xf4\xa8\x1f\xc4\x7f\xb8\xe2\xcd\x20\xdd\x73\xb8\x3c\x78\x5a\x7e\xbc\x98\xa7\x5a\x7e\xd5\xea\xaf\x5a\xfd\x0b\xea\x74\x7f\xb1\x0e\x92\xaa\xee\x33\xe2\x6b\x52\xed\x15\x96\x35\x4a\xf2\x3f\xb1\x95\xb4\x0e\x89\x9c\xfa\x14\xc8\xf6\xd0\xc1\x6e\x12\x7e\x96\x14\x1e\xde\x91\x83\xfc\x9f\x63\x85\xcf\x5c\x4c\x87\xc8\x3c\x7a\x2f\x0d\x62\x07\xaf\xa5\xf0\xa4\x6d\xfe\xe7\x2a\xf9\xbf\xa3\xdc\x7f\x82\x52\xff\xd6\x96\x1c\x85\xd2\x7b\xac\xc6\xac\xae\x1f\xb0\xc0\xbe\x5f\x3b\xfe\x87\x17\x1d\xfc\xea\xb3\x7b\x5e\x7f\xae\x3e\xeb\x2a\xdd\xfe\x9f\x39\x84\x3c\xfc\xc3\xf9\x47\x00\x00\x00\xff\xff\xd6\x54\x04\x2b\x73\x1b\x00\x00")

func tchannel_clientTmplBytes() ([]byte, error) {
	return bindataRead(
		_tchannel_clientTmpl,
		"tchannel_client.tmpl",
	)
}

func tchannel_clientTmpl() (*asset, error) {
	bytes, err := tchannel_clientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tchannel_client.tmpl", size: 7027, mode: os.FileMode(420), modTime: time.Unix(1492720389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"endpoint.tmpl": endpointTmpl,
	"endpoint_register.tmpl": endpoint_registerTmpl,
	"endpoint_test.tmpl": endpoint_testTmpl,
	"http_client.tmpl": http_clientTmpl,
	"init_clients.tmpl": init_clientsTmpl,
	"main.tmpl": mainTmpl,
	"main_test.tmpl": main_testTmpl,
	"structs.tmpl": structsTmpl,
	"tchannel_client.tmpl": tchannel_clientTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"endpoint.tmpl": &bintree{endpointTmpl, map[string]*bintree{}},
	"endpoint_register.tmpl": &bintree{endpoint_registerTmpl, map[string]*bintree{}},
	"endpoint_test.tmpl": &bintree{endpoint_testTmpl, map[string]*bintree{}},
	"http_client.tmpl": &bintree{http_clientTmpl, map[string]*bintree{}},
	"init_clients.tmpl": &bintree{init_clientsTmpl, map[string]*bintree{}},
	"main.tmpl": &bintree{mainTmpl, map[string]*bintree{}},
	"main_test.tmpl": &bintree{main_testTmpl, map[string]*bintree{}},
	"structs.tmpl": &bintree{structsTmpl, map[string]*bintree{}},
	"tchannel_client.tmpl": &bintree{tchannel_clientTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

