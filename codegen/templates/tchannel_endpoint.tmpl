{{- /* template to render edge gateway tchannel server code */ -}}
// Code generated by zanzibar
// @generated

// Package {{.PackageName}} is generated code used to handle TChannel calls using Thrift.
package {{.PackageName}}

import (
	"context"
	"errors"

	"go.uber.org/thriftrw/wire"
	"go.uber.org/zap"
	"{{.GatewayPackageName}}/clients"
	zanzibar "github.com/uber/zanzibar/runtime"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end -}}

	{{if .Method.Downstream -}}
	{{- range $idx, $pkg := .Method.Downstream.IncludedPackages -}}
	{{$file := basePath $pkg.PackageName -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
	{{- end}}
)

{{$workflow := printf "TChan%s" .WorkflowName -}}
{{$reqHeaderMap := .ReqHeaderMap -}}
{{$reqHeaderMapKeys := .ReqHeaderMapKeys -}}
{{$resHeaderMap := .ResHeaderMap -}}
{{$resHeaderMapKeys := .ResHeaderMapKeys -}}
{{$clientName := title .ClientName -}}
{{$serviceMethod := printf "%s%s" .Method.ThriftService .Method.Name -}}
{{$handlerName := printf "%sHandler"  $serviceMethod -}}
{{$genCodePkg := .Method.GenCodePkgName -}}
{{with .Method -}}
// New{{$handlerName}} creates a handler to be registered with a thrift server.
func New{{$handlerName}}(
	gateway *zanzibar.Gateway,
) zanzibar.TChanHandler {
	return &{{$handlerName}}{
		Clients: gateway.Clients.(*clients.Clients),
		Logger: gateway.Logger,
	}
}

// {{$handlerName}} is the handler for "{{.ThriftService}}::{{.Name}}".
type {{$handlerName}} struct {
	Clients *clients.Clients
	Logger *zap.Logger
}

// Service returns the service name.
func (h *{{$handlerName}}) Service() string {
	return "{{.ThriftService}}"
}

// Method returns the method name.
func (h *{{$handlerName}}) Method() string {
	return "{{.Name}}"
}

// Handle handles RPC call of "{{.ThriftService}}::{{.Name}}".
func (h *{{$handlerName}}) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var res {{$genCodePkg}}.{{.ThriftService}}_{{.Name}}_Result

	{{if ne .RequestType "" -}}
	var req {{.RequestType}}
	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	{{end -}}

	workflow := {{$workflow}}{
		Clients: h.Clients,
		Logger: h.Logger,
	}

	{{if and (eq .RequestType "") (eq .ResponseType "")}}
	respHeaders, err := workflow.Handle(ctx, headers)
	{{else if eq .RequestType ""}}
	r, respHeaders, err := workflow.Handle(ctx, reqHeaders)
	{{else if eq .ResponseType ""}}
	respHeaders, err := workflow.Handle(ctx, reqHeaders, &req)
	{{else}}
	r, respHeaders, err := workflow.Handle(ctx, reqHeaders, &req)
	{{end -}}

	{{if eq (len .Exceptions) 0 -}}
		if err != nil {
			return false, nil, nil, err
		}
		res.Success = r
	{{else -}}
		if err != nil {
			switch v := err.(type) {
			{{$method := .Name -}}
			{{range .Exceptions -}}
				case *{{$genCodePkg}}.{{.Name}}:
					if v == nil {
						return false, nil, nil, errors.New(
							"Handler for {{$method}} returned non-nil error type *{{.Name}} but nil value",
						)
					}
					res.{{.Name}} = v
			{{end -}}
				default:
					return false, nil, nil, err
			}
		} {{if ne .ResponseType "" -}} else {
			res.Success = r
		} {{end -}}
	{{end}}

	return err == nil, &res, respHeaders, nil
}

{{end -}}

{{- if .Method.Downstream }}
{{- with .Method -}}
{{- $methodName := title .Name }}
{{- $clientPackage := .Downstream.PackageName -}}
{{- $clientMethod := .DownstreamMethod -}}
{{- $clientReqType := fullTypeName ($clientMethod).RequestType ($clientPackage) -}}
{{- $clientResType := fullTypeName  ($clientMethod).ResponseType ($clientPackage) -}}
{{- $clientMethodName := title ($clientMethod).Name -}}

{{- $clientExceptions := .DownstreamMethod.Exceptions -}}

// {{$workflow}} calls thrift client {{$clientName}}.{{$clientMethodName}}
type {{$workflow}} struct {
	Clients *clients.Clients
	Logger  *zap.Logger
}

// Handle calls thrift client.
func (w {{$workflow}}) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	{{if ne .RequestType "" -}}
	r *{{.RequestType}},
	{{end -}}
) ({{- if ne .ResponseType "" -}}*{{.ResponseType}}, {{- end -}}map[string]string, error) {
	{{if ne .RequestType "" -}}
	clientRequest := convertTo{{title .Name}}ClientRequestTChan(r)
	{{end -}}
	clientHeaders := map[string]string{}
	{{if (ne (len $reqHeaderMapKeys) 0) -}}
	var ok bool
	var h string
	{{end -}}
	{{range $i, $k := $reqHeaderMapKeys -}}
	h, ok = reqHeaders.Get("{{$k}}")
	if ok {
		clientHeaders["{{index $reqHeaderMap $k}}"] = h
	}
	{{end -}}

	{{if and (eq $clientReqType "") (eq $clientResType "")}}
		{{if (eq (len $resHeaderMap) 0) -}}
		_, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(ctx, clientHeaders)
		{{else}}
		cliRespHeaders, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(ctx, clientHeaders)
		{{- end }}
	{{else if eq $clientReqType ""}}
		{{if (eq (len $resHeaderMap) 0) -}}
		clientRespBody, _, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders,
		)
		{{else}}
		clientRespBody, cliRespHeaders, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders,
		)
		{{- end }}
	{{else if eq $clientResType ""}}
		{{if (eq (len $resHeaderMap) 0) -}}
		_, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders, clientRequest,
		)
		{{else}}
		cliRespHeaders, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders, clientRequest,
		)
		{{- end }}
	{{else}}
		{{if (eq (len $resHeaderMap) 0) -}}
		clientRespBody, _, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders, clientRequest,
		)
		{{else}}
		clientRespBody, cliRespHeaders, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders, clientRequest,
		)
		{{- end }}
	{{end -}}
	if err != nil {
		// TODO: (lu) exception conversion from client to endpoint
		w.Logger.Warn("Could not make client request",
			zap.String("error", err.Error()),
		)
		return {{if eq .ResponseType ""}}nil, err{{else}}nil, nil, err{{end}}
	}

	// Filter and map response headers from client to server response.

	resHeaders := map[string]string{}
	{{range $i, $k := $resHeaderMapKeys}}
	resHeaders.Set("{{index $resHeaderMap $k}}", cliRespHeaders["{{$k}}"])
	{{- end}}

	{{if eq .ResponseType "" -}}
	return resHeaders, nil
	{{- else -}}
	response := convert{{title .Name}}ClientResponse(clientRespBody)
	return response, resHeaders, nil
	{{- end -}}
}

{{if and (ne .RequestType "") (ne $clientReqType "") -}}
func convertTo{{title .Name}}ClientRequestTChan(body *{{.RequestType}}) *{{$clientReqType}} {
	clientRequest := &{{$clientReqType}}{}

	{{ range $key, $value := .RequestFieldMap -}}
	{{ range $name, $type := $.Method.RequestTypeMap -}} {{if eq $name $key -}}
	clientRequest.{{title $key }} = {{ $type }}(body.{{title $value }})
	{{ end -}}
	{{ end -}}
	{{ end }}
	return clientRequest
}
{{end -}}


{{if and (ne .ResponseType "") (ne $clientResType "") -}}
func convert{{title .Name}}ClientResponse(body *{{$clientResType}}) *{{.ResponseType}} {
	// TODO: Add response fields mapping here.
	downstreamResponse := (*{{.ResponseType}})(body)
	return downstreamResponse
}
{{end -}}

{{end -}}
{{end -}}
