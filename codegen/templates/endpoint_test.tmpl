{{/* template to render gateway http endpoint tests */ -}}
// Code generated by zanzibar
// @generated

package {{.PackageName}}_test

import (
	"bytes"
	"net/http"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/uber/zanzibar/test/lib/bench_gateway"
	"github.com/uber/zanzibar/test/lib/test_backend"
	"github.com/uber/zanzibar/test/lib/test_gateway"
)

{{with .Method -}}
{{- $clientPackage := .Downstream.PackageName -}}
{{- $clientName := title .DownstreamService -}}
{{- $clientMethod := .DownstreamMethod -}}
{{- $clientMethodName := $clientMethod.Name | title -}}
{{- $clientMethodRequestType := fullTypeName  ($clientMethod).RequestType ($clientPackage) -}}
{{- $clientMethodResponseType := fullTypeName  ($clientMethod).ResponseType ($clientPackage) -}}

// TODO(zw): benchBytes should be generated according to request type.
var benchBytesFor{{$clientMethodName}} = []byte("{}")

func Test{{.Name | Title}}OKResponse(t *testing.T) {
	var counter int = 0

	gateway, err := testGateway.CreateGateway(t, nil, &testGateway.Options{
		KnownBackends: []string{"{{$clientName | camel}}"},
	})
	if !assert.NoError(t, err, "got bootstrap err") {
		return
	}
	defer gateway.Close()

	fake{{$clientMethodName}} := func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader({{(index .OKStatusCode 0).Code}})
		// TODO(zw): generate client response.
		if _, err := w.Write([]byte("{}")); err != nil {
			t.Fatal("can't write fake response")
		}
		counter++
	}
	gateway.Backends()["{{$clientName | camel}}"].HandleFunc(
		"{{$clientMethod.HTTPMethod}}", "{{$clientMethod.HTTPPath}}", fake{{$clientMethodName}},
	)

	res, err := gateway.MakeRequest(
		"{{.HTTPMethod}}", "{{.HTTPPath}}", bytes.NewReader(benchBytesFor{{$clientMethodName}}),
	)
	if !assert.NoError(t, err, "got http error") {
		return
	}

	assert.Equal(t, "{{(index .OKStatusCode 0).Code}} OK", res.Status)
	assert.Equal(t, 1, counter)
}

{{end -}}
