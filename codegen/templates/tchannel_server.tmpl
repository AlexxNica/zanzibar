{{- /* template to render edge gateway tchannel server code */ -}}
// Code generated by zanzibar
// @generated

// Package {{.PackageName}} is generated code used to make or handle TChannel calls using Thrift.
package {{.PackageName}}

import (
	"context"
	"errors"
	"time"

	"github.com/uber/zanzibar/runtime"
	"go.uber.org/thriftrw/wire"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
)

{{$clientID := .ClientID -}}
{{$interface := title .ClientID | printf "TChan%s" -}}
{{$clientName := title .ClientID | printf "%sClient" -}}
{{range $svc := .Services}}
{{$server := $svc.Name | printf "%sServer"}}
// {{$server}} is the TChannel backend for {{$svc.Name}} service.
type {{$server}} struct {
    handler {{$interface}}
}

// New{{$server}} wraps a handler for {{title $clientID}} so it can be registered with a thrift server.
func New{{$server}}(handler {{$interface}}) zanzibar.TChanServer {
	return &{{$server}}{
		handler,
	}
}

// Service returns the service name.
func (s *{{$server}}) Service() string {
	return "{{$svc.Name}}"
}

// Methods returns the method names handled by this server.
func (s *{{$server}}) Methods() []string {
	return []string{
	{{range .Methods -}}
	    "{{.Name}}",
	{{end -}}
	}
}

// Handle dispatches a method call to corresponding handler.
func (s *{{$server}}) Handle(
    ctx context.Context,
    methodName string,
    reqHeaders map[string]string,
    wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	switch methodName {
	{{range .Methods -}}
	    case "{{.Name}}":
		    return s.handle{{.Name}}(ctx, reqHeaders, wireValue)
	{{end -}}
	default:
		return false, nil, nil, fmt.Errorf(
		    "method %v not found in service %v", methodName, s.Service(),
		)
	}
}

{{range .Methods}}
{{$genCodePkg := .GenCodePkgName -}}
func (s *{{$server}}) handle{{.Name}}(
    ctx context.Context,
    reqHeaders map[string]string,
    wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req {{$genCodePkg}}.{{$svc.Name}}_{{.Name}}_Args
	var res {{$genCodePkg}}.{{$svc.Name}}_{{.Name}}_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}

    {{- if and (eq .RequestType "") (eq .ResponseType "")}}
	    respHeaders, err := s.handler.{{.Name}}(ctx, reqHeaders)
    {{- else if eq .RequestType ""}}
	    r, respHeaders, err := s.handler.{{.Name}}(ctx, reqHeaders, &req)
    {{- else if eq .ResponseType ""}}
	    respHeaders, err := s.handler.{{.Name}}(ctx, reqHeaders, &req)
	{{- else}}
	    r, respHeaders, err := s.handler.{{.Name}}(ctx, reqHeaders, &req)
	{{- end}}

	{{if eq (len .Exceptions) 0 -}}
	    if err != nil {
            return false, nil, nil, err
	    }
	    res.Success = r
    {{else -}}
	    if err != nil {
	        switch v := err.(type) {
		    {{range .Exceptions -}}
		        case *{{$genCodePkg}}.{{.Name}}:
		            if v == nil {
		                return false, nil, nil, errors.New(
		                    "Handler for {{.Name}} returned non-nil error type *{{.Name}} but nil value",
		                )
		            }
		            res.{{.Name}} = v
            {{end -}}
		        default:
		            return false, nil, nil, err
            }
        } {{if ne .ResponseType "" -}} else {
            res.Success = r
        } {{end -}}
    {{end}}

	return err == nil, &res, respHeaders, nil
}
{{end -}}

{{end}}
