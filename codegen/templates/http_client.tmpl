{{- /* template to render edge gateway http client code */ -}}
{{- /* TODO(zw): refactor it to two templates */ -}}
// Code generated by zanzibar
// @generated

package {{.PackageName}}

import (
	"bytes"
	"context"
	"net/http"
	"strconv"

	"github.com/uber/zanzibar/runtime"
	{{range $idx, $pkg := .IncludedPackages -}}
	"{{$pkg}}"
	{{end}}
)

{{range .Services}}
{{- $clientName := title .Name | printf "%sClient" -}}
// {{$clientName}} is the http client for service {{.Name}}.
type {{$clientName}} zanzibar.HTTPClient

// NewClient returns a new http client for service {{.Name}}.
func NewClient(config *zanzibar.StaticConfig) *{{$clientName}} {
	ip := config.MustGetString("clients.{{.Name | camel}}.ip")
	port := config.MustGetInt("clients.{{.Name | camel}}.port")

	baseURL := "http://" + ip + ":" + strconv.Itoa(int(port))
	return &{{$clientName}}{
		Client: &http.Client{
			Transport: &http.Transport{
				DisableKeepAlives:   false,
				MaxIdleConns:        500,
				MaxIdleConnsPerHost: 500,
			},
		},
		BaseURL: baseURL,
	}
}

{{/*  ========================= Method =========================  */ -}}

{{range .Methods}}

{{- if ne .RequestType ""}}
{{/* template for having request http body */}}
// {{title .Name}} calls "{{.HTTPPath}}" endpoint.
func (c *{{$clientName}}) {{title .Name}}(ctx context.Context, r *{{.RequestType}}) (*http.Response, error) {
	// Generate full URL.
	// TODO: (jakev) insert params if needed here.
	fullURL := c.BaseURL
	{{- range $k, $segment := .PathSegments -}}
	{{- if eq $segment.Type "static" -}}+"/{{$segment.Text}}"
	{{- else -}}+"/"+string(r.{{$segment.BodyIdentifier | title}})
	{{- end -}}
	{{- end}}

	rawBody, err := r.MarshalJSON()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("{{.HTTPMethod}}", fullURL, bytes.NewReader(rawBody))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return c.Client.Do(req.WithContext(ctx))
}

{{else}} {{/* template for having http body */ -}}

// {{title .Name}} calls "{{.HTTPPath}}" endpoint.
func (c *{{$clientName}}) {{title .Name}}(ctx context.Context) (*http.Response, error) {
	// Generate full URL.
	fullURL := c.BaseURL
	{{- range $k, $segment := .PathSegments -}}
	{{- if eq $segment.Type "static" -}}+"/{{$segment.Text}}"
	{{- else -}}+"/"+r.{{$segment.BodyIdentifier}}
	{{- end -}}
	{{- end}}

	req, err := http.NewRequest("{{.HTTPMethod}}", fullURL, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	return c.Client.Do(req.WithContext(ctx))
}
{{end}} {{- /* <if .ReqeustType ne ""> */ -}}
{{end}} {{- /* <range .Methods> */ -}}
{{end}} {{- /* <range .Services> */ -}}
