{{- /* template to render gateway endpoint registration */ -}}
// Code generated by zanzibar
// @generated

package endpoints

import (
	"context"

	{{range $idx, $pkg := .IncludedPackages -}}
	"{{$pkg}}"
	{{end}}

	{{range $idx, $endpoint := .Endpoints -}}
	{{range $idx, $middleware := .Middlewares -}}
	// Path to "{{$middleware}}"
	{{end}}
	{{end}}

	"github.com/uber/zanzibar/runtime"
)

type handlerFn func(
	ctx context.Context,
	req *zanzibar.ServerHTTPRequest,
	res *zanzibar.ServerHTTPResponse,
	clients *clients.Clients,
)

type myEndpoint struct {
	HandlerFn handlerFn
	Clients   *clients.Clients
}

func (endpoint *myEndpoint) handle(
	ctx context.Context,
	req *zanzibar.ServerHTTPRequest,
	res *zanzibar.ServerHTTPResponse,
) {
	fn := endpoint.HandlerFn
	fn(ctx, req, res, endpoint.Clients)
}

func makeEndpoint(
	g *zanzibar.Gateway,
	endpointName string,
	handlerName string,
	handlerFn handlerFn,
) *zanzibar.Endpoint {
	myEndpoint := &myEndpoint{
		Clients:   g.Clients.(*clients.Clients),
		HandlerFn: handlerFn,
	}
//	wrappedHandler := example.NewMiddleWare(
//		g,
//		example.Options{},
//		myEndpoint.handle)
	return zanzibar.NewEndpoint(
		g,
		endpointName,
		handlerName,
		myEndpoint.handle,
	)
}

// Register will register all endpoints
func Register(g *zanzibar.Gateway, router *zanzibar.Router) {
	{{range $idx, $endpoint := .Endpoints -}}
	router.Register(
		"{{$endpoint.Method}}", "{{$endpoint.HTTPPath}}",
		makeEndpoint(
			g,
			"{{$endpoint.EndpointID}}",
			"{{$endpoint.HandlerID}}",
			{{range $idx, $middleware := $endpoint.Middlewares -}}
			// Apply "{{$middleware}}"
			{{end -}}
			{{$endpoint.HandlerType}},
		),
	)
	{{end}}
}
