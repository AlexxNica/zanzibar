{{- /* template to render gateway endpoint registration */ -}}
// Code generated by zanzibar
// @generated

package endpoints

import (
	"context"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}

	"github.com/uber/zanzibar/runtime"
)

// Endpoints is a struct that holds all the endpoints
type Endpoints struct {
	{{range $idx, $endpoint := .Endpoints -}}
	{{$endpoint.HandlerName}} *{{$endpoint.HandlerType}}
	{{end}}
}

// CreateEndpoints bootstraps the endpoints.
func CreateEndpoints(
	gateway *zanzibar.Gateway,
) interface{} {
	return &Endpoints{
		{{range $idx, $e := .Endpoints -}}
		{{$e.HandlerName}}: {{$e.PackageName}}.
			New{{$e.MethodName}}Endpoint(gateway),
		{{end}}
	}
}

// Register will register all endpoints
func Register(g *zanzibar.Gateway, router *zanzibar.Router) {
	endpoints := CreateEndpoints(g).(*Endpoints)

	{{range $idx, $endpoint := .Endpoints -}}
	router.Register(
		"{{$endpoint.Method}}", "{{$endpoint.HTTPPath}}",
		zanzibar.NewEndpoint(
			g,
			"{{$endpoint.EndpointID}}",
			"{{$endpoint.HandlerID}}",
			{{ if len $endpoint.Middlewares | ne 0 -}}
			zanzibar.NewStack([]zanzibar.MiddlewareHandle{
				{{range $idx, $middleware := $endpoint.Middlewares -}}
				{{$middleware.Name}}.NewMiddleWare(
					g,
						{{$middleware.Name}}.Options{
						{{range $key, $value := $middleware.Options -}}
								{{$key}} : {{$value}},
						{{end -}}
						},
				),
				{{end -}}
			}, endpoints.{{$endpoint.HandlerName}}.HandleRequest).Handle,
			{{- else -}}
			endpoints.{{$endpoint.HandlerName}}.HandleRequest,
			{{- end}}
			
		),
	)
	{{end}}
}
